# -*- coding: utf-8 -*-
# -- This file is part of the Apio project
# -- (C) 2016-2024 FPGAwars
# -- Authors
# --  * Jes√∫s Arroyo (2016-2019)
# --  * Juan Gonzalez (obijuan) (2019-2024)
# -- License GPLv2
"""Implementation of 'apio clean' command"""

import os
import shutil
import sys
from typing import Optional, List
from pathlib import Path
import click
from apio.commands import options
from apio.apio_context import ApioContext, ApioContextScope
from apio.utils import cmd_util
from apio.common.apio_console import cout
from apio.common.apio_styles import SUCCESS


# ----------- apio clean


def _delete_dir_or_file(path):

    assert os.path.exists(path), path

    if os.path.isfile(path):
        # -- Delete a file.
        os.remove(path)
    else:
        # -- Delete a dir
        shutil.rmtree(path)

    assert not os.path.exists(path), path
    cout(f"- Removed {path}")


def _delete_candidates(candidates: List[str], wrapper: Optional[str]):
    """Delete given files and dirs."""

    # -- Delete candidates that exists.
    items_deleted = 0
    for path in candidates:
        if os.path.exists(path):
            _delete_dir_or_file(path)
            items_deleted += 1

    # -- If wrapper dir was specified and it's empty, delete it as well.
    if wrapper and os.path.isdir(wrapper) and not os.listdir(wrapper):
        _delete_dir_or_file(wrapper)
        items_deleted += 1

    # -- Report
    if items_deleted:
        cout("Cleanup completed", style=SUCCESS)
    else:
        cout("Already cleaned up", style=SUCCESS)


# -- Text in the rich-text format of the python rich library.
APIO_CLEAN_HELP = """
The command 'apio clean' removes the output files generated by apio \
commands. By default it cleans up only for the default env but can \
be used to clean other envs or all envs.

If the command cleans a single env and finds that upon return the _build
directory is empty, it deletes it as well.

Example:[code]
  apio clean                 # Clean the default env
  apio clean --env my-env    # Clean the specified env
  apio clean --all           # Clean all envs[/code]
"""


@click.command(
    name="clean",
    cls=cmd_util.ApioCommand,
    short_help="Delete the apio generated files.",
    help=APIO_CLEAN_HELP,
)
@click.pass_context
@options.all_option_gen(help="Clean all envs.")
@options.env_option_gen(help="Select an env to clean.")
@options.project_dir_option
def cli(
    cmd_ctx: click.Context,
    # Options
    all_: bool,
    env: Optional[str],
    project_dir: Optional[Path],
):
    """Implements the apio clean command. It deletes temporary files generated
    by apio commands.
    """

    cmd_util.check_at_most_one_param(cmd_ctx, ["all_", "env"])

    # -- Create the apio context.
    apio_ctx = ApioContext(
        scope=ApioContextScope.PROJECT_REQUIRED,
        project_dir_arg=project_dir,
        env_arg=env,
    )

    # -- Get shortcuts to apio context values.
    env_name: str = apio_ctx.project.env_name
    build_all_path: Path = apio_ctx.build_all_path
    build_env_path: Path = apio_ctx.build_env_path

    # -- Determine candidates for deletion.
    candidates = [".sconsign.dblite"]

    # -- Handle clean all.
    if all_:
        cout("Cleaning all envs")
        candidates.append(str(build_all_path))

    # -- Handle clean env.
    else:
        cout(f"Cleaning {env_name}")
        candidates.append(str(build_env_path))

    # -- Delete the candidates if exists and if build build all dir
    # -- is left empty, delete it as well.
    _delete_candidates(candidates, wrapper=build_all_path)

    sys.exit(0)
