"""Scons script of ICE40 FPGAs."""

# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------
# -- Generic Scons script for Sintesizing hardware on an FPGA and more.
# -- This file is part of the Apio project
# -- (C) 2016-2019 FPGAwars
# -- Authors Juan Gonzáles, Jesús Arroyo
# -- Licence GPLv2
# ----------------------------------------------------------------------

# W0511: TODO: (fixme)
# pylint: disable=W0511

# C0103: Module name doesn't conform to snake_case naming style (invalid-name)
# pylint: disable=C0103

# C0209: Formatting could be an f-string (consider-using-f-string)
# pylint: disable=C0209

# Similar lines in 2 files
# pylint: disable=R0801

# W0613: Unused argument 'xx' (unused-argument)
# pylint: disable=W0613

# TODO: Can we fix this?
# E0611: No name in module (no-name-in-module)
# pylint: disable=E0611

# TODO: Can we fix this?
# E1101: Instance of 'Base' has no 'X' member (no-member)
# pylint: disable=E1101

# TODO: Remove this disable after moving the functions with 'env' argument
# to scons_util.py.
# W0621: Redefining name 'env' from outer scope (redefined-outer-name)
# pylint: disable=W0621


import os
from SCons.Script import (
    Builder,
    AlwaysBuild,
    GetOption,
    COMMAND_LINE_TARGETS,
    ARGUMENTS,
    Glob,
)
from apio.scons.scons_util import (
    TARGET,
    SConstructId,
    is_testbench,
    basename,
    is_windows,
    get_constraint_file,
    create_construction_env,
    arg_bool,
    arg_str,
    get_programmer_cmd,
    make_verilog_src_scanner,
    make_verilator_config_builder,
    get_source_files,
    get_sim_config,
    get_tests_configs,
    make_waves_target,
    make_iverilog_action,
    make_verilator_action,
    get_report_action,
)


# -- Create the environment
env = create_construction_env(ARGUMENTS)

# -- Uncomment for debugging of the scons subprocess using a remote debugger.
# from apio.scons import scons_util
# scons_util.wait_for_remote_debugger(env)

# -- Get arguments.
FPGA_SIZE = arg_str(env, "fpga_size", "")
FPGA_TYPE = arg_str(env, "fpga_type", "")
FPGA_PACK = arg_str(env, "fpga_pack", "")
TOP_MODULE = arg_str(env, "top_module", "")
VERBOSE_ALL = arg_bool(env, "verbose_all", False)
VERBOSE_YOSYS = arg_bool(env, "verbose_yosys", False)
VERBOSE_PNR = arg_bool(env, "verbose_pnr", False)
TESTBENCH = arg_str(env, "testbench", "")
VERILATOR_ALL = arg_bool(env, "all", False)
VERILATOR_NO_STYLE = arg_bool(env, "nostyle", False)
NOWARNS = arg_str(env, "nowarn", "").split(",")
WARNS = arg_str(env, "warn", "").split(",")


# -- Resources paths
IVL_PATH = os.environ["IVL"] if "IVL" in os.environ else ""
ICEBOX_PATH = os.environ["ICEBOX"] if "ICEBOX" in os.environ else ""
CHIPDB_PATH = os.path.join(ICEBOX_PATH, "chipdb-{0}.txt".format(FPGA_SIZE))
YOSYS_PATH = os.environ["YOSYS_LIB"] if "YOSYS_LIB" in os.environ else ""
YOSYS_LIB_DIR = YOSYS_PATH + "/ice40"
YOSYS_LIB_FILE = YOSYS_LIB_DIR + "/cells_sim.v"

# -- Create scannenr to identify dependencies in verilog files.
verilog_src_scanner = make_verilog_src_scanner(env)

# -- Get a list of the synthesizable files (e.g. "main.v") and a list of
# -- the testbench files (e.g. "main_tb.v")
synth_srcs, test_srcs = get_source_files(env)


# -- Get the PCF file name.
PCF = get_constraint_file(env, ".pcf", TOP_MODULE)


# -- Apio build/upload/time/report.
# -- Builder (yosys, Synthesis).
# -- (modules).v -> hardware.json.
synth_builder = Builder(
    action='yosys -p "synth_ice40 {0} -json $TARGET" {1} $SOURCES'.format(
        ("-top " + TOP_MODULE) if TOP_MODULE else "",
        "" if VERBOSE_ALL or VERBOSE_YOSYS else "-q",
    ),
    suffix=".json",
    src_suffix=".v",
    source_scanner=verilog_src_scanner,
)
env.Append(BUILDERS={"Synth": synth_builder})

# -- The name of the report file generated by nextpnr.
PNR_REPORT_FILE: str = TARGET + ".pnr"


# -- Apio report.
# -- emmiter (nextpnr, Place and route).
# -- hardware.json -> hardware.pnr.
def pnr_emitter(target, source, env):
    """A scons emmiter function for the pnr builder. It declares that the
    nextpnr builder creates also a second file called 'hardware.pnr'."""
    target.append(PNR_REPORT_FILE)
    return target, source


# -- Apio build/upload/time/report.
# -- builder (nextpnr, Place and route).
# -- hardware.json -> hardware.asc, hardware.pnr.
pnr_builder = Builder(
    action=(
        "nextpnr-ice40 --{0}{1} --package {2} --json $SOURCE --asc $TARGET "
        "--report {3} --pcf {4} {5}"
    ).format(
        FPGA_TYPE,
        FPGA_SIZE,
        FPGA_PACK,
        PNR_REPORT_FILE,
        PCF,
        "" if VERBOSE_ALL or VERBOSE_PNR else "-q",
    ),
    suffix=".asc",
    src_suffix=".json",
    emitter=pnr_emitter,
)
env.Append(BUILDERS={"PnR": pnr_builder})


# -- Apio build/upload.
# -- Builder (icepack, bitstream generator).
# -- hardware.asc -> hardware.bin.
bitstream_builder = Builder(
    action="icepack $SOURCE $TARGET", suffix=".bin", src_suffix=".asc"
)
env.Append(BUILDERS={"Bin": bitstream_builder})


# -- Apio time.
# -- Builder | icetime | Time reports.
# -- hardware.asc -> hardware.rpt
time_rpt_builder = Builder(
    action='icetime -d {0}{1} -P {2} -C "{3}" -mtr $TARGET $SOURCE'.format(
        FPGA_TYPE, FPGA_SIZE, FPGA_PACK, CHIPDB_PATH
    ),
    suffix=".rpt",
    src_suffix=".asc",
)
env.Append(BUILDERS={"Time": time_rpt_builder})


# -- Apio build/upload/time/report.
# -- Targets.
# -- (module).v -> hardware.json -> hardware.asc -> hardware.bin.
synth_target = env.Synth(TARGET, [synth_srcs])
pnr_target = env.PnR(TARGET, [synth_target, PCF])
bin_target = env.Bin(TARGET, pnr_target)
build_target = env.Alias("build", bin_target)

if VERBOSE_YOSYS:
    AlwaysBuild(synth_target)
if VERBOSE_PNR:
    AlwaysBuild(pnr_target)
if VERBOSE_ALL:
    AlwaysBuild(synth_target, pnr_target, build_target)

# -- Apio report.
# -- Targets.
# -- hardware.asc -> hardware.pnr -> (report)
# pnr_report_target = env.PnrReport(TARGET, pnr_target)
report_action = get_report_action(
    env, SConstructId.SCONSTRUCT_ICE40, VERBOSE_PNR
)
report_target = env.Alias("report", PNR_REPORT_FILE, report_action)
AlwaysBuild(report_target)


# -- Apio upload.
# -- Targets.
# -- hardware.bin -> FPGA.
programmer_cmd: str = get_programmer_cmd(env)
upload_target = env.Alias("upload", bin_target, programmer_cmd)
AlwaysBuild(upload_target)


# -- Apio time.
# -- Targets.
# -- hardware.asc -> hardware.rpt
time_rpt_target = env.Time(pnr_target)
AlwaysBuild(time_rpt_target)
time_target = env.Alias("time", time_rpt_target)


# -- Apio verify.
# -- Builder (iverilog, verilog compiler).
# -- (modules + testbenches).v -> hardware.out.
iverilog_verify_builder = Builder(
    action=make_iverilog_action(
        env,
        ivl_path=IVL_PATH,
        verbose=VERBOSE_ALL,
        vcd_output_name="dummy_vcd_output",
        is_interactive=False,
        extra_params=["-DNO_ICE40_DEFAULT_ASSIGNMENTS"],
        lib_files=[YOSYS_LIB_FILE],
    ),
    suffix=".out",
    src_suffix=".v",
    source_scanner=verilog_src_scanner,
)
env.Append(BUILDERS={"IVerilogVerify": iverilog_verify_builder})


# -- Apio sim/test
# -- Builder helper (iverolog command generator).
# -- (modules + testbench).v -> (testbench).out.
def iverilog_tb_generator(source, target, env, for_signature):
    """Construct the action string for the iverilog_tb_builder builder
    for a given testbench target."""
    # Extract testbench name from target file name.
    testbench_file = str(target[0])
    assert is_testbench(env, testbench_file), testbench_file
    testbench_name = basename(env, testbench_file)

    # Construct the command line.
    action = make_iverilog_action(
        env,
        ivl_path=IVL_PATH,
        verbose=VERBOSE_ALL,
        vcd_output_name=testbench_name,
        is_interactive=("sim" in COMMAND_LINE_TARGETS),
        extra_params=["-DNO_ICE40_DEFAULT_ASSIGNMENTS"],
        lib_files=[YOSYS_LIB_FILE],
    )
    return action


# -- Apio sim/test.
# -- Builder (iverilog, verilog compiler).
# -- (modules + testbench).v -> (testbench).out.
iverilog_tb_builder = Builder(
    # Action string is different for sim and for
    generator=iverilog_tb_generator,
    suffix=".out",
    src_suffix=".v",
    source_scanner=verilog_src_scanner,
)
env.Append(BUILDERS={"IVerilogTestbench": iverilog_tb_builder})


# -- Apio graph.
# -- Builder (yosys, .dot graph generator).
# -- hardware.v -> hardware.dot.
dot_builder = Builder(
    action=(
        'yosys -f verilog -p "show -format dot -colors 1 '
        '-prefix hardware {0}" {1} $SOURCES'
    ).format(
        TOP_MODULE if TOP_MODULE else "unknown_top",
        "" if VERBOSE_ALL else "-q",
    ),
    suffix=".dot",
    src_suffix=".v",
    source_scanner=verilog_src_scanner,
)
env.Append(BUILDERS={"DOT": dot_builder})


# -- Apio graph.
# -- Builder  (dot, svg renderer).
# -- hardware.dot -> hardware.svg.
svg_builder = Builder(
    # Expecting graphviz dot to be installed and in the path.
    action="dot -Tsvg $SOURCES -o $TARGET",
    suffix=".svg",
    src_suffix=".dot",
)
env.Append(BUILDERS={"SVG": svg_builder})


# -- Apio sim/test.
# -- Builder (vvp, simulator).
# -- (testbench).out -> (testbench).vcd.
vcd_builder = Builder(
    action="vvp {0} $SOURCE".format(
        "" if (is_windows(env) or not IVL_PATH) else f'-M "{IVL_PATH}"'
    ),
    suffix=".vcd",
    src_suffix=".out",
)
env.Append(BUILDERS={"VCD": vcd_builder})


# -- Apio verify.
# -- Targets
# -- (modules).v -> (modules).out
verify_out_target = env.IVerilogVerify(TARGET, synth_srcs + test_srcs)
AlwaysBuild(verify_out_target)
verify_target = env.Alias("verify", verify_out_target)


# -- Apio graph.
# -- Targets.
# -- (modules).v -> hardware.dot -> hardware.svg.
#
# TODO: Launch a portable SVG (or differentn format) viewer.
dot_target = env.DOT(TARGET, synth_srcs)
AlwaysBuild(dot_target)
svg_target = env.SVG(TARGET, dot_target)
AlwaysBuild(svg_target)
graph_target = env.Alias("graph", svg_target)


# -- Apio sim.
# -- Targets.
# -- (modules).v -> (testbench).out -> (testbench).vcd -> gtkwave
if "sim" in COMMAND_LINE_TARGETS:
    config = get_sim_config(env, TESTBENCH, synth_srcs)
    sim_out_target = env.IVerilogTestbench(config.top_module, config.srcs)
    vcd_file_target = env.VCD(sim_out_target)
    waves_target = make_waves_target(env, vcd_file_target, config.top_module)
    AlwaysBuild(waves_target)


# -- Apio test.
# -- Targets.
# -- (modules).v -> (testbenchs).out -> (testbenchs).vcd
if "test" in COMMAND_LINE_TARGETS:
    configs = get_tests_configs(env, TESTBENCH, synth_srcs, test_srcs)
    tests_targets = []
    for config in configs:
        test_out_target = env.IVerilogTestbench(config.top_module, config.srcs)
        AlwaysBuild(test_out_target)
        test_vcd_target = env.VCD(test_out_target)
        AlwaysBuild(test_vcd_target)
        test_target = env.Alias(
            config.top_module, [test_out_target, test_vcd_target]
        )
        tests_targets.append(test_target)

    # Create a target for the test command that depends on all the test
    # targets.
    tests_target = env.Alias("test", tests_targets)
    AlwaysBuild(tests_target)


# -- Apio lint.
# -- Builder (plain text generator)
# -- (none) -> hardware.vlt builder.
verilator_config_builder = make_verilator_config_builder(
    env,
    (
        "`verilator_config\n"
        f'lint_off -rule COMBDLY      -file "{YOSYS_LIB_DIR}/*"\n'
        f'lint_off -rule WIDTHEXPAND  -file "{YOSYS_LIB_DIR}/*"\n'
    ),
)
env.Append(BUILDERS={"VerilatorConfig": verilator_config_builder})


# -- Apio lint.
# -- Builder (verilator, verilog linter)
# -- (modules + testbenches).v -> lint report to stdout builder.
verilator_builder = Builder(
    action=make_verilator_action(
        env,
        warnings_all=VERILATOR_ALL,
        warnings_no_style=VERILATOR_NO_STYLE,
        no_warns=NOWARNS,
        warns=WARNS,
        top_module=TOP_MODULE,
        extra_params=["-DNO_ICE40_DEFAULT_ASSIGNMENTS"],
        lib_files=[YOSYS_LIB_FILE],
    ),
    src_suffix=".v",
    source_scanner=verilog_src_scanner,
)
env.Append(BUILDERS={"Verilator": verilator_builder})


# -- Apio lint.
# -- Targets.
# -- (modules).v -> lint report to stdout.
lint_config_target = env.VerilatorConfig(TARGET, [])
lint_out_target = env.Verilator(TARGET, synth_srcs + test_srcs)
env.Depends(lint_out_target, lint_config_target)
lint_target = env.Alias("lint", lint_out_target)
AlwaysBuild(lint_target)


# -- These is for cleaning the artifact files.
if GetOption("clean"):
    # Identify additional files that may not be associated with targets and
    # associate them with a target such that they will be cleaned up as well.
    # This cleans for example artifacts of past simulation since the testbench
    # target are dynamic and changes with the selected testbench.
    for glob_pattern in ["*.out", "*.vcd"]:
        for node in Glob(glob_pattern):
            env.Clean(build_target, str(node))

    env.Default(
        [
            report_target,
            time_target,
            build_target,
            verify_out_target,
            graph_target,
            lint_target,
        ]
    )
