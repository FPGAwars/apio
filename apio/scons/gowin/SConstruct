"""Scons script of Gowin FPGAs."""

# -*- coding: utf-8 -*-
# ----------------------------------------------------------------------
# -- Generic Scons script for Sintesizing hardware on an FPGA and more.
# -- This file is part of the Apio project
# -- (C) 2016-2019 FPGAwars
# -- Authors Riley Wilton, Juan Gonzáles, Jesús Arroyo
# -- Licence GPLv2
# ----------------------------------------------------------------------

# W0511: TODO: (fixme)
# pylint: disable=W0511

# C0103: Module name doesn't conform to snake_case naming style (invalid-name)
# pylint: disable=C0103

# C0209: Formatting could be an f-string (consider-using-f-string)
# pylint: disable=C0209

# Similar lines in 2 files
# pylint: disable=R0801

# W0613: Unused argument 'xx' (unused-argument)
# pylint: disable=W0613

# TODO: Can we fix this?
# E0611: No name in module (no-name-in-module)
# pylint: disable=E0611

# TODO: Can we fix this?
# E1101: Instance of 'Base' has no 'X' member (no-member)
# pylint: disable=E1101

# TODO: Remove this disable after moving the functions with 'env' argument
# to scons_util.py.
# W0621: Redefining name 'env' from outer scope (redefined-outer-name)
# pylint: disable=W0621


import os
from SCons.Script import (
    Builder,
    GetOption,
    COMMAND_LINE_TARGETS,
    ARGUMENTS,
)
from apio.scons.scons_util import (
    TARGET,
    SConstructId,
    has_testbench_name,
    basename,
    is_windows,
    get_constraint_file,
    create_construction_env,
    arg_bool,
    arg_str,
    get_programmer_cmd,
    make_verilog_src_scanner,
    make_verilator_config_builder,
    make_dot_builder,
    make_graphviz_builder,
    get_source_files,
    get_sim_config,
    get_tests_configs,
    make_waves_target,
    make_iverilog_action,
    make_verilator_action,
    get_report_action,
    set_up_cleanup,
    get_source_file_issue_action,
)

# # -- Uncomment for debugging of the scons subprocess using a remote debugger.
# from apio.scons import scons_util
# scons_util.wait_for_remote_debugger()

# -- Create the environment
env = create_construction_env(ARGUMENTS)


# -- Get arguments.
FPGA_MODEL = arg_str(env, "fpga_model", "")
FPGA_SIZE = arg_str(env, "fpga_size", "")
FPGA_TYPE = arg_str(env, "fpga_type", "")
FPGA_PACK = arg_str(env, "fpga_pack", "")
TOP_MODULE = arg_str(env, "top_module", "")
VERBOSE_ALL = arg_bool(env, "verbose_all", False)
VERBOSE_YOSYS = arg_bool(env, "verbose_yosys", False)
VERBOSE_PNR = arg_bool(env, "verbose_pnr", False)
TESTBENCH = arg_str(env, "testbench", "")
FORCE_SIM = arg_bool(env, "force_sim", False)
VERILATOR_ALL = arg_bool(env, "all", False)
VERILATOR_NO_STYLE = arg_bool(env, "nostyle", False)
VERILATOR_NOWARNS = arg_str(env, "nowarn", "").split(",")
VERILATOR_WARNS = arg_str(env, "warn", "").split(",")
GRAPH_SPEC = arg_str(env, "graph_spec", "")


# -- Resources paths
IVL_PATH = os.environ["IVL"] if "IVL" in os.environ else ""
YOSYS_PATH = os.environ["YOSYS_LIB"] if "YOSYS_LIB" in os.environ else ""
YOSYS_LIB_DIR = YOSYS_PATH + "/gowin"

# -- Create scannenr to identify dependencies in verilog files.
verilog_src_scanner = make_verilog_src_scanner(env)

# -- Get a list of the synthesizable files (e.g. "main.v") and a list of
# -- the testbench files (e.g. "main_tb.v")
synth_srcs, test_srcs = get_source_files(env)


# -- Get the CST file name.
CST = get_constraint_file(env, ".cst", TOP_MODULE)

# -- Apio build/upload/time/report.
# -- Builder (yosys, Synthesis).
# -- (modules).v -> hardware.json.
synth_builder = Builder(
    action=('yosys -p "synth_gowin {0} -json $TARGET" {1} $SOURCES').format(
        ("-top " + TOP_MODULE) if TOP_MODULE else "",
        "" if VERBOSE_ALL or VERBOSE_YOSYS else "-q",
    ),
    suffix=".json",
    src_suffix=".v",
    source_scanner=verilog_src_scanner,
)
env.Append(BUILDERS={"Synth": synth_builder})

# -- The name of the report file generated by nextpnr.
PNR_REPORT_FILE: str = TARGET + ".pnr"


# -- Apio report.
# -- emmiter (nextpnr, Place and route).
# -- hardware.json -> hardware.pnr.
def pnr_emitter(target, source, env):
    """A scons emmiter function for the pnr builder. It declares that the
    nextpnr builder creates also a second file called 'hardware.pnr'."""
    target.append(PNR_REPORT_FILE)
    return target, source


# -- Apio build/upload/time/report.
# -- builder (nextpnr, Place and route).
# -- hardware.json -> hardware.pnr.json.
pnr_builder = Builder(
    action=(
        "nextpnr-himbaechel --device {0} --json $SOURCE --write $TARGET "
        "--report {1} --vopt family={2} --vopt cst={3} {4}"
    ).format(
        FPGA_MODEL,
        PNR_REPORT_FILE,
        FPGA_TYPE,
        CST,
        "" if VERBOSE_ALL or VERBOSE_PNR else "-q",
    ),
    suffix=".pnr.json",
    src_suffix=".json",
    emitter=pnr_emitter,
)
env.Append(BUILDERS={"PnR": pnr_builder})


# -- Apio build/upload.
# -- Builder (icepack, bitstream generator).
# -- hardware.pnr.json -> hardware.fs.
bitstream_builder = Builder(
    action="gowin_pack -d {0} -o $TARGET $SOURCE".format(FPGA_TYPE.upper()),
    suffix=".fs",
    src_suffix=".pnr.json",
)
env.Append(BUILDERS={"Bin": bitstream_builder})


# -- Apio build/upload.
# -- Targets.
# -- (module).v -> hardware.json -> hardware.pnr.json -> hardware.bin.
synth_target = env.Synth(TARGET, [synth_srcs])
pnr_target = env.PnR(TARGET, [synth_target, CST])
bin_target = env.Bin(TARGET, pnr_target)
build_target = env.Alias("build", bin_target)

if VERBOSE_YOSYS:
    env.AlwaysBuild(synth_target)
if VERBOSE_PNR:
    env.AlwaysBuild(pnr_target)
if VERBOSE_ALL:
    env.AlwaysBuild(synth_target, pnr_target, build_target)

# -- Apio report.
# -- Targets.
# -- hardware..pnr.json -> hardware.pnr -> (report)
report_action = get_report_action(
    env, SConstructId.SCONSTRUCT_GOWIN, VERBOSE_PNR
)
report_target = env.Alias("report", PNR_REPORT_FILE, report_action)
env.AlwaysBuild(report_target)


# -- Apio upload.
# -- Targets.
# -- hardware.fs -> FPGA.
programmer_cmd = get_programmer_cmd(env)
upload_target = env.Alias("upload", bin_target, programmer_cmd)
env.AlwaysBuild(upload_target)


# -- Apio verify.
# -- Builder (iverilog, verilog compiler).
# -- (modules + testbenches).v -> hardware.out.
iverilog_verify_builder = Builder(
    action=make_iverilog_action(
        env,
        ivl_path=IVL_PATH,
        verbose=VERBOSE_ALL,
        vcd_output_name="dummy_vcd_output",
        is_interactive=False,
        lib_dirs=[YOSYS_LIB_DIR],
    ),
    suffix=".out",
    src_suffix=".v",
    source_scanner=verilog_src_scanner,
)
env.Append(BUILDERS={"IVerilogVerify": iverilog_verify_builder})


# -- Apio sim/test
# -- Builder helper (iverolog command generator).
# -- (modules + testbench).v -> (testbench).out.
def iverilog_tb_generator(source, target, env, for_signature):
    """Construct the action string for the iverilog_tb_builder builder
    for a given testbench target."""
    # Extract testbench name from target file name.
    testbench_file = str(target[0])
    assert has_testbench_name(env, testbench_file), testbench_file
    testbench_name = basename(env, testbench_file)

    # Construct the command line.
    action = [
        # -- Scan source files for issues.
        get_source_file_issue_action(env),
        # -- Perform the actual test or sim compilation.
        make_iverilog_action(
            env,
            ivl_path=IVL_PATH,
            verbose=VERBOSE_ALL,
            vcd_output_name=testbench_name,
            is_interactive=("sim" in COMMAND_LINE_TARGETS),
            extra_params=["-DNO_ICE40_DEFAULT_ASSIGNMENTS"],
            lib_dirs=[YOSYS_LIB_DIR],
        ),
    ]
    return action


# -- Apio sim/test.
# -- Builder (iverilog, verilog compiler).
# -- (modules + testbench).v -> (testbench).out.
iverilog_tb_builder = Builder(
    # Action string is different for sim and for
    generator=iverilog_tb_generator,
    suffix=".out",
    src_suffix=".v",
    source_scanner=verilog_src_scanner,
)
env.Append(BUILDERS={"IVerilogTestbench": iverilog_tb_builder})


# -- Apio graph.
# -- Builder (yosys, .dot graph generator).
# -- hardware.v -> hardware.dot.
dot_builder = make_dot_builder(
    env, TOP_MODULE, verilog_src_scanner, VERBOSE_ALL
)
env.Append(BUILDERS={"DOT": dot_builder})

# -- Apio graph.
# -- Builder  (dot, svg/pdf/png renderer).
# -- hardware.dot -> hardware.svg/pdf/png.
graphviz_builder = make_graphviz_builder(env, GRAPH_SPEC)
env.Append(BUILDERS={"GRAPHVIZ": graphviz_builder})


# -- Apio sim/test.
# -- Builder (vvp, simulator).
# -- (testbench).out -> (testbench).vcd.
vcd_builder = Builder(
    action="vvp {0} $SOURCE -dumpfile=$TARGET".format(
        "" if (is_windows(env) or not IVL_PATH) else f'-M "{IVL_PATH}"'
    ),
    suffix=".vcd",
    src_suffix=".out",
)
env.Append(BUILDERS={"VCD": vcd_builder})


# -- Apio verify.
# -- Targets
# -- (modules).v -> (modules).out
verify_out_target = env.IVerilogVerify(TARGET, synth_srcs + test_srcs)
env.AlwaysBuild(verify_out_target)
verify_target = env.Alias("verify", verify_out_target)


# -- Apio graph.
# -- Targets.
# -- (modules).v -> hardware.dot -> hardware.svg.
dot_target = env.DOT(TARGET, synth_srcs)
env.AlwaysBuild(dot_target)
graphviz_target = env.GRAPHVIZ(TARGET, dot_target)
env.AlwaysBuild(graphviz_target)
graph_target = env.Alias("graph", graphviz_target)


# -- Apio sim.
# -- Targets.
# -- (modules).v -> (testbench).out -> (testbench).vcd -> gtkwave
if "sim" in COMMAND_LINE_TARGETS:
    sim_config = get_sim_config(env, TESTBENCH, synth_srcs)
    sim_out_target = env.IVerilogTestbench(
        sim_config.build_testbench_name, sim_config.srcs
    )
    if FORCE_SIM:
        env.AlwaysBuild(sim_out_target)
    sim_vcd_target = env.VCD(sim_out_target)
    if FORCE_SIM:
        env.AlwaysBuild(sim_vcd_target)
    waves_target = make_waves_target(env, sim_vcd_target, sim_config)
    env.AlwaysBuild(waves_target)


# -- Apio test.
# -- Targets.
# -- (modules).v -> (testbenchs).out -> (testbenchs).vcd
if "test" in COMMAND_LINE_TARGETS:
    sim_configs = get_tests_configs(env, TESTBENCH, synth_srcs, test_srcs)
    tests_targets = []
    for sim_config in sim_configs:
        test_out_target = env.IVerilogTestbench(
            sim_config.build_testbench_name, sim_config.srcs
        )
        env.AlwaysBuild(test_out_target)
        test_vcd_target = env.VCD(test_out_target)
        env.AlwaysBuild(test_vcd_target)
        test_target = env.Alias(
            sim_config.build_testbench_name, [test_out_target, test_vcd_target]
        )
        tests_targets.append(test_target)

    # Create a target for the test command that depends on all the test
    # targets.
    tests_target = env.Alias("test", tests_targets)
    env.AlwaysBuild(tests_target)


# -- Apio lint.
# -- Builder (plain text generator)
# -- (none) -> hardware.vlt builder.
verilator_config_builder = make_verilator_config_builder(
    env,
    (
        "`verilator_config\n"
        f'lint_off -rule COMBDLY      -file "{YOSYS_LIB_DIR}/*"\n'
        f'lint_off -rule WIDTHEXPAND  -file "{YOSYS_LIB_DIR}/*"\n'
    ),
)
env.Append(BUILDERS={"VerilatorConfig": verilator_config_builder})


# -- Apio lint.
# -- Builder (verilator, verilog linter)
# -- (modules + testbenches).v -> lint report to stdout builder.
verilator_builder = Builder(
    action=[
        # -- Scan the source files for 'other' issues.
        get_source_file_issue_action(env),
        # -- Perform the lint.
        make_verilator_action(
            env,
            warnings_all=VERILATOR_ALL,
            warnings_no_style=VERILATOR_NO_STYLE,
            no_warns=VERILATOR_NOWARNS,
            warns=VERILATOR_WARNS,
            top_module=TOP_MODULE,
            lib_dirs=[YOSYS_LIB_DIR],
        ),
    ],
    src_suffix=".v",
    source_scanner=verilog_src_scanner,
)
env.Append(BUILDERS={"Verilator": verilator_builder})


# -- Apio lint.
# -- Targets.
# -- (modules).v -> lint report to stdout.
lint_config_target = env.VerilatorConfig(TARGET, [])
lint_out_target = env.Verilator(TARGET, synth_srcs + test_srcs)
env.Depends(lint_out_target, lint_config_target)
lint_target = env.Alias("lint", lint_out_target)
env.AlwaysBuild(lint_target)


# -- Handle the cleanu of the artifact files.
if GetOption("clean"):
    set_up_cleanup(env)
