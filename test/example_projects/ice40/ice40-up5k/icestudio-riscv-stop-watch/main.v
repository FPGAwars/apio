// Code generated by Icestudio 0.8.1w202112300112

`default_nettype none

//---- Top entity
module main #(
 parameter v771499 = "v771499.list"
) (
 input vclk,
 output [2:0] v36f80c
);
 localparam p0 = v771499;
 wire [0:7] w1;
 wire [0:2] w2;
 wire [0:2] w3;
 wire [0:7] w4;
 wire w5;
 assign v36f80c = w2;
 assign w5 = vclk;
 v6809d2 #(
  .v9298ae(p0)
 ) v60d27e (
  .v6d8c97(w1),
  .vc4e0ba(w4),
  .v6dda25(w5)
 );
 vda0861 v213a5f (
  .vffb58f(w1)
 );
 vd63ed7 v5bbda7 (
  .v1045ee(w3),
  .vcc8c7c(w4)
 );
 v1b8919 vcb4b3d (
  .v9c69dc(w2),
  .v23a690(w3)
 );
endmodule

//---- Top entity
module v6809d2 #(
 parameter v9298ae = "v9298ae.list"
) (
 input v6dda25,
 input [7:0] v6d8c97,
 output [7:0] vc4e0ba
);
 localparam p3 = v9298ae;
 wire w0;
 wire w1;
 wire w2;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire [0:7] w8;
 wire [0:7] w9;
 wire w10;
 wire [0:31] w11;
 wire [0:31] w12;
 wire [0:31] w13;
 wire [0:31] w14;
 wire [0:31] w15;
 wire [0:3] w16;
 wire w17;
 wire w18;
 wire w19;
 assign w4 = v6dda25;
 assign w5 = v6dda25;
 assign w6 = v6dda25;
 assign w7 = v6dda25;
 assign vc4e0ba = w8;
 assign w9 = v6d8c97;
 assign w1 = w0;
 assign w5 = w4;
 assign w6 = w4;
 assign w6 = w5;
 assign w7 = w4;
 assign w7 = w5;
 assign w7 = w6;
 assign w12 = w11;
 vf1cffe v468719 (
  .ve9ba68(w0),
  .v79476f(w1),
  .v6dda25(w4),
  .v27dec4(w10),
  .v9231ba(w11),
  .vfc9252(w13),
  .va0e119(w14),
  .ve17e80(w16)
 );
 vd30ca9 v16f275 (
  .v9fb85f(w0)
 );
 v893ac6 #(
  .vba98fe(p3)
 ) vc59f55 (
  .v6dda25(w5),
  .v5d7e06(w11),
  .v9a5b8a(w15)
 );
 ve4c3a8 v29c9ed (
  .v5c832d(w12),
  .v4642b6(w17),
  .vd02149(w18),
  .vafdfa0(w19)
 );
 vf68661 v66eb94 (
  .v6dda25(w7),
  .vfeb41a(w8),
  .vf837fe(w13),
  .ve9e5a1(w16),
  .ve146f6(w19)
 );
 v145d1e v3f3e01 (
  .vc74a9c(w9),
  .vb76294(w14),
  .vb79ed5(w15),
  .v6287a6(w17),
  .v19f646(w18)
 );
 v04e061 vb15d38 (
  .v4642b6(w2),
  .vd6bebe(w6)
 );
 v3676a0 vd1c5e9 (
  .v0e28cb(w2),
  .vcbab45(w10)
 );
endmodule

//---------------------------------------------------
//-- Generic-comp-clk
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic component with clk input
//---------------------------------------------------
//---- Top entity
module vf1cffe (
 input v6dda25,
 input v27dec4,
 input [31:0] va0e119,
 input v79476f,
 input ve9ba68,
 output [31:0] v9231ba,
 output [31:0] vfc9252,
 output [3:0] ve17e80,
 output v8d2eee
);
 wire w0;
 wire [0:31] w1;
 wire w2;
 wire w3;
 wire [0:31] w4;
 wire [0:31] w5;
 wire [0:3] w6;
 wire w7;
 wire w8;
 assign w0 = v27dec4;
 assign w1 = va0e119;
 assign w2 = v79476f;
 assign w3 = ve9ba68;
 assign v9231ba = w4;
 assign vfc9252 = w5;
 assign ve17e80 = w6;
 assign v8d2eee = w7;
 assign w8 = v6dda25;
 vf1cffe_v172245 v172245 (
  .reset(w0),
  .mem_rdata(w1),
  .mem_rbusy(w2),
  .mem_wbusy(w3),
  .mem_addr(w4),
  .mem_wdata(w5),
  .mem_wmask(w6),
  .mem_rstrb(w7),
  .clk(w8)
 );
endmodule

//---------------------------------------------------
//-- RV32I
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- RV32I
//---------------------------------------------------

module vf1cffe_v172245 (
 input clk,
 input reset,
 input [31:0] mem_rdata,
 input mem_rbusy,
 input mem_wbusy,
 output [31:0] mem_addr,
 output [31:0] mem_wdata,
 output [3:0] mem_wmask,
 output mem_rstrb
);
    localparam RESET_ADDR = 0;
    parameter ADDR_WIDTH       = 24;           
 
    localparam ADDR_PAD = {(32-ADDR_WIDTH){1'b0}}; // 32-bits padding for addrs
 
  /***************************************************************************/
  // Instruction decoding.
  /***************************************************************************/
 
  // Extracts rd,rs1,rs2,funct3,imm and opcode from instruction. 
  // Reference: Table page 104 of:
  // https://content.riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf
 
  // The destination register
  wire [4:0] rdId = instr[11:7];
 
  // The ALU function, decoded in 1-hot form (doing so reduces LUT count)
  // It is used as follows: funct3Is[val] <=> funct3 == val
  (* onehot *)
  wire [7:0] funct3Is = 8'b00000001 << instr[14:12];
 
  // The five immediate formats, see RiscV reference (link above), Fig. 2.4 p. 12
  wire [31:0] Uimm = {    instr[31],   instr[30:12], {12{1'b0}}};
  wire [31:0] Iimm = {{21{instr[31]}}, instr[30:20]};
  /* verilator lint_off UNUSED */ // MSBs of SBJimms are not used by addr adder. 
  wire [31:0] Simm = {{21{instr[31]}}, instr[30:25],instr[11:7]};
  wire [31:0] Bimm = {{20{instr[31]}}, instr[7],instr[30:25],instr[11:8],1'b0};
  wire [31:0] Jimm = {{12{instr[31]}}, instr[19:12],instr[20],instr[30:21],1'b0};
  /* verilator lint_on UNUSED */
 
    // Base RISC-V (RV32I) has only 10 different instructions !
    wire isLoad    =  (instr[6:2] == 5'b00000); // rd <- mem[rs1+Iimm]
    wire isALUimm  =  (instr[6:2] == 5'b00100); // rd <- rs1 OP Iimm
    wire isAUIPC   =  (instr[6:2] == 5'b00101); // rd <- PC + Uimm
    wire isStore   =  (instr[6:2] == 5'b01000); // mem[rs1+Simm] <- rs2
    wire isALUreg  =  (instr[6:2] == 5'b01100); // rd <- rs1 OP rs2
    wire isLUI     =  (instr[6:2] == 5'b01101); // rd <- Uimm
    wire isBranch  =  (instr[6:2] == 5'b11000); // if(rs1 OP rs2) PC<-PC+Bimm
    wire isJALR    =  (instr[6:2] == 5'b11001); // rd <- PC+4; PC<-rs1+Iimm
    wire isJAL     =  (instr[6:2] == 5'b11011); // rd <- PC+4; PC<-PC+Jimm
    wire isSYSTEM  =  (instr[6:2] == 5'b11100); // rd <- cycles
 
    wire isALU = isALUimm | isALUreg;
 
    /***************************************************************************/
    // The register file.
    /***************************************************************************/
    
    reg [31:0] rs1;
    reg [31:0] rs2;
    reg [31:0] registerFile [31:0];
 
    always @(posedge clk) begin
      if (writeBack)
        if (rdId != 0)
          registerFile[rdId] <= writeBackData;
    end
 
    /***************************************************************************/
    // The ALU. Does operations and tests combinatorially, except shifts.
    /***************************************************************************/
 
    // First ALU source, always rs1
    wire [31:0] aluIn1 = rs1;
 
    // Second ALU source, depends on opcode:
    //    ALUreg, Branch:     rs2
    //    ALUimm, Load, JALR: Iimm
    wire [31:0] aluIn2 = isALUreg | isBranch ? rs2 : Iimm;
 
    reg  [31:0] aluReg;       // The internal register of the ALU, used by shift.
    reg  [4:0]  aluShamt;     // Current shift amount.
 
    wire aluBusy = |aluShamt; // ALU is busy if shift amount is non-zero.
    wire aluWr;               // ALU write strobe, starts shifting.
 
    // The adder is used by both arithmetic instructions and JALR.
    wire [31:0] aluPlus = aluIn1 + aluIn2;
 
    // Use a single 33 bits subtract to do subtraction and all comparisons
    // (trick borrowed from swapforth/J1)
    wire [32:0] aluMinus = {1'b1, ~aluIn2} + {1'b0,aluIn1} + 33'b1;
    wire        LT  = (aluIn1[31] ^ aluIn2[31]) ? aluIn1[31] : aluMinus[32];
    wire        LTU = aluMinus[32];
    wire        EQ  = (aluMinus[31:0] == 0);
 
    // Notes:
    // - instr[30] is 1 for SUB and 0 for ADD
    // - for SUB, need to test also instr[5] to discriminate ADDI:
    //    (1 for ADD/SUB, 0 for ADDI, and Iimm used by ADDI overlaps bit 30 !)
    // - instr[30] is 1 for SRA (do sign extension) and 0 for SRL
    
    wire [31:0] aluOut =
      (funct3Is[0]  ? instr[30] & instr[5] ? aluMinus[31:0] : aluPlus : 32'b0) | 
      (funct3Is[2]  ? {31'b0, LT}                                     : 32'b0) | 
      (funct3Is[3]  ? {31'b0, LTU}                                    : 32'b0) | 
      (funct3Is[4]  ? aluIn1 ^ aluIn2                                 : 32'b0) | 
      (funct3Is[6]  ? aluIn1 | aluIn2                                 : 32'b0) | 
      (funct3Is[7]  ? aluIn1 & aluIn2                                 : 32'b0) | 
      (funct3IsShift ? aluReg                                         : 32'b0) ; 
 
    wire funct3IsShift = funct3Is[1] | funct3Is[5];
 
    always @(posedge clk) begin
       if(aluWr) begin
          if (funct3IsShift) begin  // SLL, SRA, SRL
 	    aluReg <= aluIn1; 
 	    aluShamt <= aluIn2[4:0]; 
 	 end 
       end 
 
       // Compact form of:
       // funct3=001              -> SLL  (aluReg <= aluReg << 1)      
       // funct3=101 &  instr[30] -> SRA  (aluReg <= {aluReg[31], aluReg[31:1]})
       // funct3=101 & !instr[30] -> SRL  (aluReg <= {1'b0,       aluReg[31:1]})
 
       if (|aluShamt) begin
          aluShamt <= aluShamt - 1;
 	 aluReg <= funct3Is[1] ? aluReg << 1 :              // SLL
 		   {instr[30] & aluReg[31], aluReg[31:1]};  // SRA,SRL
       end
    end
 
    /***************************************************************************/
    // The predicate for conditional branches.
    /***************************************************************************/
 
    wire predicate =
         funct3Is[0] &  EQ  | // BEQ
         funct3Is[1] & !EQ  | // BNE
         funct3Is[4] &  LT  | // BLT
         funct3Is[5] & !LT  | // BGE
         funct3Is[6] &  LTU | // BLTU
         funct3Is[7] & !LTU ; // BGEU
 
    /***************************************************************************/
    // Program counter and branch target computation.
    /***************************************************************************/
 
    reg  [ADDR_WIDTH-1:0] PC; // The program counter.
    reg  [31:2] instr;        // Latched instruction. Note that bits 0 and 1 are
                              // ignored (not used in RV32I base instr set).
 
    wire [ADDR_WIDTH-1:0] PCplus4 = PC + 4;
 
    // An adder used to compute branch address, JAL address and AUIPC.
    // branch->PC+Bimm    AUIPC->PC+Uimm    JAL->PC+Jimm
    // Equivalent to PCplusImm = PC + (isJAL ? Jimm : isAUIPC ? Uimm : Bimm)
    wire [ADDR_WIDTH-1:0] PCplusImm = PC + ( instr[3] ? Jimm[ADDR_WIDTH-1:0] : 
 					    instr[4] ? Uimm[ADDR_WIDTH-1:0] : 
 					               Bimm[ADDR_WIDTH-1:0] );
 
    // A separate adder to compute the destination of load/store.
    // testing instr[5] is equivalent to testing isStore in this context.
    wire [ADDR_WIDTH-1:0] loadstore_addr = rs1[ADDR_WIDTH-1:0] + 
 		   (instr[5] ? Simm[ADDR_WIDTH-1:0] : Iimm[ADDR_WIDTH-1:0]);
 
    assign mem_addr = {ADDR_PAD, 
 		       state[WAIT_INSTR_bit] | state[FETCH_INSTR_bit] ? 
 		       PC : loadstore_addr
 		     };
 
    /***************************************************************************/
    // The value written back to the register file.
    /***************************************************************************/
 
    wire [31:0] writeBackData  =
       /* verilator lint_off WIDTH */	       	       
       (isSYSTEM            ? cycles               : 32'b0) |  // SYSTEM
       /* verilator lint_on WIDTH */	       	       	       
       (isLUI               ? Uimm                 : 32'b0) |  // LUI
       (isALU               ? aluOut               : 32'b0) |  // ALUreg, ALUimm
       (isAUIPC             ? {ADDR_PAD,PCplusImm} : 32'b0) |  // AUIPC
       (isJALR   | isJAL    ? {ADDR_PAD,PCplus4  } : 32'b0) |  // JAL, JALR
       (isLoad              ? LOAD_data            : 32'b0);   // Load
 
    /***************************************************************************/
    // LOAD/STORE
    /***************************************************************************/
 
    // All memory accesses are aligned on 32 bits boundary. For this
    // reason, we need some circuitry that does unaligned halfword
    // and byte load/store, based on:
    // - funct3[1:0]:  00->byte 01->halfword 10->word
    // - mem_addr[1:0]: indicates which byte/halfword is accessed
 
    wire mem_byteAccess     = instr[13:12] == 2'b00; // funct3[1:0] == 2'b00;
    wire mem_halfwordAccess = instr[13:12] == 2'b01; // funct3[1:0] == 2'b01;
 
    // LOAD, in addition to funct3[1:0], LOAD depends on:
    // - funct3[2] (instr[14]): 0->do sign expansion   1->no sign expansion
 
    wire LOAD_sign = 
 	!instr[14] & (mem_byteAccess ? LOAD_byte[7] : LOAD_halfword[15]);
 
    wire [31:0] LOAD_data =
          mem_byteAccess ? {{24{LOAD_sign}},     LOAD_byte} :
      mem_halfwordAccess ? {{16{LOAD_sign}}, LOAD_halfword} :
                           mem_rdata ;
 
    wire [15:0] LOAD_halfword = 
 	       loadstore_addr[1] ? mem_rdata[31:16] : mem_rdata[15:0];
    
    wire  [7:0] LOAD_byte = 
 	       loadstore_addr[0] ? LOAD_halfword[15:8] : LOAD_halfword[7:0];
 
    // STORE
 
    assign mem_wdata[ 7: 0] = rs2[7:0];
    assign mem_wdata[15: 8] = loadstore_addr[0] ? rs2[7:0]  : rs2[15: 8];
    assign mem_wdata[23:16] = loadstore_addr[1] ? rs2[7:0]  : rs2[23:16];
    assign mem_wdata[31:24] = loadstore_addr[0] ? rs2[7:0]  : 
 			     loadstore_addr[1] ? rs2[15:8] : rs2[31:24];
 
    // The memory write mask:
    //    1111                     if writing a word
    //    0011 or 1100             if writing a halfword 
    //                                (depending on loadstore_addr[1])
    //    0001, 0010, 0100 or 1000 if writing a byte     
    //                                (depending on loadstore_addr[1:0])
 
    wire [3:0] STORE_wmask =
 	      mem_byteAccess      ? 
 	            (loadstore_addr[1] ? 
 		          (loadstore_addr[0] ? 4'b1000 : 4'b0100) :
 		          (loadstore_addr[0] ? 4'b0010 : 4'b0001) 
                     ) :
 	      mem_halfwordAccess ? 
 	            (loadstore_addr[1] ? 4'b1100 : 4'b0011) :
               4'b1111;
 
    /*************************************************************************/
    // And, last but not least, the state machine.
    /*************************************************************************/
 
    localparam FETCH_INSTR_bit     = 0;
    localparam WAIT_INSTR_bit      = 1;
    localparam EXECUTE_bit         = 2;
    localparam WAIT_ALU_OR_MEM_bit = 3;
    localparam NB_STATES           = 4;
 
    localparam FETCH_INSTR     = 1 << FETCH_INSTR_bit;
    localparam WAIT_INSTR      = 1 << WAIT_INSTR_bit;
    localparam EXECUTE         = 1 << EXECUTE_bit;
    localparam WAIT_ALU_OR_MEM = 1 << WAIT_ALU_OR_MEM_bit;
    
    (* onehot *)
    reg [NB_STATES-1:0] state;
 
    // The signals (internal and external) that are determined
    // combinatorially from state and other signals.
 
    // register write-back enable.
    wire writeBack = ~(isBranch | isStore ) & 
 	            (state[EXECUTE_bit] | state[WAIT_ALU_OR_MEM_bit]);
 
    // The memory-read signal.
    assign mem_rstrb = state[EXECUTE_bit] & isLoad | state[FETCH_INSTR_bit];
 
    // The mask for memory-write.
    assign mem_wmask = {4{state[EXECUTE_bit] & isStore}} & STORE_wmask;
 
    // aluWr starts computation (shifts) in the ALU.
    assign aluWr = state[EXECUTE_bit] & isALU;
 
    wire jumpToPCplusImm = isJAL | (isBranch & predicate);
 `ifdef NRV_IS_IO_ADDR  
    wire needToWait = isLoad | 
 		     isStore  & `NRV_IS_IO_ADDR(mem_addr) | 
 		     isALU & funct3IsShift;
 `else
    wire needToWait = isLoad | isStore | isALU & funct3IsShift;   
 `endif
    
    always @(posedge clk) begin
       if(!reset) begin
          state      <= WAIT_ALU_OR_MEM; // Just waiting for !mem_wbusy
          PC         <= RESET_ADDR[ADDR_WIDTH-1:0];
       end else
 
       // See note [1] at the end of this file.
       (* parallel_case *)
       case(1'b1)
 
         state[WAIT_INSTR_bit]: begin
            if(!mem_rbusy) begin // may be high when executing from SPI flash
               rs1 <= registerFile[mem_rdata[19:15]];
               rs2 <= registerFile[mem_rdata[24:20]];
               instr <= mem_rdata[31:2]; // Bits 0 and 1 are ignored (see
               state <= EXECUTE;         // also the declaration of instr).
            end
         end
 
         state[EXECUTE_bit]: begin
            PC <= isJALR          ? {aluPlus[ADDR_WIDTH-1:1],1'b0} :
                  jumpToPCplusImm ? PCplusImm :
                  PCplus4;
 	   state <= needToWait ? WAIT_ALU_OR_MEM : FETCH_INSTR;
         end
 
         state[WAIT_ALU_OR_MEM_bit]: begin
            if(!aluBusy & !mem_rbusy & !mem_wbusy) state <= FETCH_INSTR;
         end
 
         default: begin // FETCH_INSTR
           state <= WAIT_INSTR;
         end
 	
       endcase
    end
 
    /***************************************************************************/
    // Cycle counter
    /***************************************************************************/
 
 `ifdef NRV_COUNTER_WIDTH
    reg [`NRV_COUNTER_WIDTH-1:0]  cycles;   
 `else   
    reg [31:0]  cycles;
 `endif   
    always @(posedge clk) cycles <= cycles + 1;
 
 `ifdef BENCH
    initial begin
       cycles = 0;
       aluShamt = 0;
       registerFile[0] = 0;
    end
 `endif
 
 
 /*****************************************************************************/
 // Notes:
 //
 // [1] About the "reverse case" statement, also used in Claire Wolf's picorv32:
 // It is just a cleaner way of writing a series of cascaded if() statements,
 // To understand it, think about the case statement *in general* as follows:
 // case (expr)
 //       val_1: statement_1
 //       val_2: statement_2
 //   ... val_n: statement_n
 // endcase
 // The first statement_i such that expr == val_i is executed. 
 // Now if expr is 1'b1:
 // case (1'b1)
 //       cond_1: statement_1
 //       cond_2: statement_2
 //   ... cond_n: statement_n
 // endcase
 // It is *exactly the same thing*, the first statement_i such that
 // expr == cond_i is executed (that is, such that 1'b1 == cond_i,
 // in other words, such that cond_i is true)
 // More on this: 
 //     https://stackoverflow.com/questions/15418636/case-statement-in-verilog
 //
 // [2] state uses 1-hot encoding (at any time, state has only one bit set to 1).
 // It uses a larger number of bits (one bit per state), but often results in
 // a both more compact (fewer LUTs) and faster state machine.
 
 
 
endmodule
//---- Top entity
module vd30ca9 (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 vd30ca9_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

//---------------------------------------------------
//-- bit-0
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Constant bit 0
//---------------------------------------------------

module vd30ca9_vb2eccd (
 output q
);
 //-- Constant bit-0
 assign q = 1'b0;
 
 
endmodule
//---- Top entity
module v893ac6 #(
 parameter vba98fe = "vba98fe.list"
) (
 input v6dda25,
 input [31:0] v5d7e06,
 output [31:0] v9a5b8a
);
 localparam p6 = vba98fe;
 wire w0;
 wire [0:31] w1;
 wire w2;
 wire [0:31] w3;
 wire [0:9] w4;
 wire [0:31] w5;
 wire w7;
 wire [0:31] w8;
 wire [0:31] w9;
 assign w7 = v6dda25;
 assign v9a5b8a = w8;
 assign w9 = v5d7e06;
 vd30ca9 vc98086 (
  .v9fb85f(w0)
 );
 vd30ca9 v30628d (
  .v9fb85f(w2)
 );
 v2c97f6 v773b48 (
  .v7c9bd8(w3)
 );
 v675d07 #(
  .v5a4ee6(p6)
 ) vdbacf7 (
  .v23dc54(w2),
  .v6f4b70(w3),
  .vb261ad(w4),
  .v922e3d(w7),
  .vddff9f(w8)
 );
 v794b6d va8ea8d (
  .vef1612(w4),
  .ve841af(w5)
 );
 vaaf5c4 ve8e400 (
  .v712289(w0),
  .v51eedb(w1),
  .v4f6beb(w9)
 );
 vaaf5c4 v677471 (
  .v4f6beb(w1),
  .v51eedb(w5)
 );
endmodule

//---------------------------------------------------
//-- Generic-comp-clk
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic component with clk input
//---------------------------------------------------
//---- Top entity
module v2c97f6 #(
 parameter vfffc23 = 0
) (
 output [31:0] v7c9bd8
);
 localparam p0 = vfffc23;
 wire [0:31] w1;
 assign v7c9bd8 = w1;
 v959751 #(
  .vc5c8ea(p0)
 ) v9f49e7 (
  .vbc97e4(w1)
 );
endmodule

//---------------------------------------------------
//-- 32bits-Value_0
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 32bits constant value: 0
//---------------------------------------------------
//---- Top entity
module v959751 #(
 parameter vc5c8ea = 0
) (
 output [31:0] vbc97e4
);
 localparam p0 = vc5c8ea;
 wire [0:31] w1;
 assign vbc97e4 = w1;
 v959751_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

//---------------------------------------------------
//-- 32-bits-gen-constant
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic: 32-bits generic constant
//---------------------------------------------------

module v959751_v465065 #(
 parameter VALUE = 0
) (
 output [31:0] k
);
 assign k = VALUE;
endmodule
//---- Top entity
module v675d07 #(
 parameter v5a4ee6 = "v5a4ee6.list"
) (
 input v922e3d,
 input [9:0] vb261ad,
 input [31:0] v6f4b70,
 input v23dc54,
 output [31:0] vddff9f
);
 localparam p2 = v5a4ee6;
 wire w0;
 wire w1;
 wire [0:9] w3;
 wire [0:31] w4;
 wire [0:31] w5;
 assign w0 = v922e3d;
 assign w1 = v23dc54;
 assign w3 = vb261ad;
 assign vddff9f = w4;
 assign w5 = v6f4b70;
 v675d07_vbaa912 #(
  .ROMF(p2)
 ) vbaa912 (
  .clk(w0),
  .wr(w1),
  .addr(w3),
  .data_out(w4),
  .data_in(w5)
 );
endmodule

//---------------------------------------------------
//-- Memory-1Kx32
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Smem 1kx32: Synchronous memory: 1024 words of 32 bits
//---------------------------------------------------

module v675d07_vbaa912 #(
 parameter ROMF = 0
) (
 input clk,
 input [9:0] addr,
 input [31:0] data_in,
 input wr,
 output [31:0] data_out
);
 //-- Address with
 localparam ADDR_WIDTH = 10;
 //-- Data with
 localparam DATA_WIDTH = 32;
 
 //-- Size of the memory
 localparam SIZE = 1 << ADDR_WIDTH;
 
 //-- Memory itself
 reg [DATA_WIDTH-1:0] mem[0:SIZE-1];
 
 //-- The data_out is a registered output (not a wire)
 reg data_out;
 
 //-- Reading port: Synchronous
 always @(posedge clk)
 begin
   data_out <= mem[addr];
 end
 
 //-- Writing port: Synchronous
 always @(posedge clk)
 begin
     if (wr) mem[addr] <= data_in;
 end
 
 
 //-- Init the memory
 initial begin
   
   if (ROMF)
     $readmemh(ROMF, mem, 0, SIZE-1);
   
 end
 
endmodule
//---- Top entity
module v794b6d (
 input [31:0] ve841af,
 output [21:0] v51fb1f,
 output [9:0] vef1612
);
 wire [0:31] w0;
 wire [0:9] w1;
 wire [0:21] w2;
 assign w0 = ve841af;
 assign vef1612 = w1;
 assign v51fb1f = w2;
 v794b6d_v9a2a06 v9a2a06 (
  .i(w0),
  .o0(w1),
  .o1(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus32-Split-22-10
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus32-Split-22-10: Split the 32-bits bus into two buses of 22 and 10 wires
//---------------------------------------------------

module v794b6d_v9a2a06 (
 input [31:0] i,
 output [21:0] o1,
 output [9:0] o0
);
 assign o1 = i[31:10];
 assign o0 = i[9:0];
endmodule
//---- Top entity
module vaaf5c4 (
 input v712289,
 input [31:0] v4f6beb,
 output [31:0] v51eedb,
 output v7e4f0f
);
 wire [0:31] w0;
 wire w1;
 wire w2;
 wire [0:30] w3;
 wire [0:31] w4;
 assign w0 = v4f6beb;
 assign v7e4f0f = w1;
 assign w2 = v712289;
 assign v51eedb = w4;
 vecd30a vd4273f (
  .ve841af(w0),
  .v8d1a42(w1),
  .v11ef80(w3)
 );
 v51b3c0 v9b7810 (
  .v411a12(w2),
  .vd40455(w3),
  .v7d0a31(w4)
 );
endmodule

//---------------------------------------------------
//-- SR1-32bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- SR1-32bits: Shift  a 32-bit value one bit right. MSB is filled with the input  in
//---------------------------------------------------
//---- Top entity
module vecd30a (
 input [31:0] ve841af,
 output [30:0] v11ef80,
 output v8d1a42
);
 wire [0:31] w0;
 wire w1;
 wire [0:30] w2;
 assign w0 = ve841af;
 assign v8d1a42 = w1;
 assign v11ef80 = w2;
 vecd30a_v9a2a06 v9a2a06 (
  .i(w0),
  .o0(w1),
  .o1(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus32-Split-31-1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus32-Split-31-1: Split the 32-bits bus into two buses of 31 and 1 wires
//---------------------------------------------------

module vecd30a_v9a2a06 (
 input [31:0] i,
 output [30:0] o1,
 output o0
);
 assign o1 = i[31:1];
 assign o0 = i[0];
endmodule
//---- Top entity
module v51b3c0 (
 input v411a12,
 input [30:0] vd40455,
 output [31:0] v7d0a31
);
 wire [0:31] w0;
 wire [0:30] w1;
 wire w2;
 assign v7d0a31 = w0;
 assign w1 = vd40455;
 assign w2 = v411a12;
 v51b3c0_v9a2a06 v9a2a06 (
  .o(w0),
  .i0(w1),
  .i1(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus32-Join-1-31
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus32-Join-1-31: Join the two buses into an 32-bits Bus
//---------------------------------------------------

module v51b3c0_v9a2a06 (
 input i1,
 input [30:0] i0,
 output [31:0] o
);
 assign o = {i1, i0};
 
endmodule
//---- Top entity
module ve4c3a8 #(
 parameter v389bd1 = 5'h1F
) (
 input [31:0] v5c832d,
 output v4642b6,
 output vafdfa0,
 output vd02149
);
 localparam p8 = v389bd1;
 wire w0;
 wire w1;
 wire w2;
 wire [0:14] w3;
 wire [0:4] w4;
 wire [0:4] w5;
 wire [0:4] w6;
 wire [0:4] w7;
 wire [0:2] w9;
 wire [0:31] w10;
 wire [0:31] w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 assign w10 = v5c832d;
 assign w11 = v5c832d;
 assign v4642b6 = w12;
 assign vafdfa0 = w13;
 assign vd02149 = w14;
 assign w2 = w1;
 assign w6 = w4;
 assign w11 = w10;
 assign w16 = w15;
 v3676a0 v8f98d9 (
  .vcbab45(w0),
  .v0e28cb(w1)
 );
 vba518e v72db53 (
  .v0e28cb(w0),
  .vcbab45(w13),
  .v3ca442(w16)
 );
 vba518e v97a3cf (
  .v3ca442(w2),
  .vcbab45(w14),
  .v0e28cb(w15)
 );
 v9a2795 v666bdb (
  .vda577d(w1),
  .vdee7c7(w9)
 );
 va7b832 ve316c5 (
  .v29a212(w3),
  .ve841af(w10)
 );
 vef0f91 v3ffece (
  .vcbe66f(w3),
  .vfa86aa(w4)
 );
 v1cc648 v736214 (
  .vfad888(w4),
  .vd80e4f(w5),
  .v4642b6(w12)
 );
 v108a6d v2a89b0 (
  .v6ece80(w5)
 );
 v1cc648 v01ba64 (
  .vd80e4f(w6),
  .vfad888(w7),
  .v4642b6(w15)
 );
 v3693fc #(
  .vc5c8ea(p8)
 ) v006a39 (
  .vc8d3b9(w7)
 );
 ve500df vfe8608 (
  .vbb2522(w9),
  .ve841af(w11)
 );
endmodule

//---------------------------------------------------
//-- Generic-comp
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Componente genérico
//---------------------------------------------------
//---- Top entity
module v3676a0 (
 input v0e28cb,
 output vcbab45
);
 wire w0;
 wire w1;
 assign w0 = v0e28cb;
 assign vcbab45 = w1;
 v3676a0_vd54ca1 vd54ca1 (
  .a(w0),
  .q(w1)
 );
endmodule

//---------------------------------------------------
//-- NOT
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- NOT gate (Verilog implementation)
//---------------------------------------------------

module v3676a0_vd54ca1 (
 input a,
 output q
);
 //-- NOT Gate
 assign q = ~a;
 
 
endmodule
//---- Top entity
module vba518e (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vba518e_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

//---------------------------------------------------
//-- AND2
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Two bits input And gate
//---------------------------------------------------

module vba518e_vf4938a (
 input a,
 input b,
 output c
);
 //-- AND gate
 //-- Verilog implementation
 
 assign c = a & b;
 
endmodule
//---- Top entity
module v9a2795 (
 input [2:0] vdee7c7,
 output vda577d,
 output v3f8943,
 output v64d863
);
 wire w0;
 wire w1;
 wire [0:2] w2;
 wire w3;
 assign v3f8943 = w0;
 assign v64d863 = w1;
 assign w2 = vdee7c7;
 assign vda577d = w3;
 v9a2795_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .i(w2),
  .o2(w3)
 );
endmodule

//---------------------------------------------------
//-- Bus3-Split-all
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus3-Split-all: Split the 3-bits bus into three wires
//---------------------------------------------------

module v9a2795_v9a2a06 (
 input [2:0] i,
 output o2,
 output o1,
 output o0
);
 assign o2 = i[2];
 assign o1 = i[1];
 assign o0 = i[0];
endmodule
//---- Top entity
module va7b832 (
 input [31:0] ve841af,
 output [16:0] v62a8c1,
 output [14:0] v29a212
);
 wire [0:31] w0;
 wire [0:14] w1;
 wire [0:16] w2;
 assign w0 = ve841af;
 assign v29a212 = w1;
 assign v62a8c1 = w2;
 va7b832_v9a2a06 v9a2a06 (
  .i(w0),
  .o0(w1),
  .o1(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus32-Split-17-15
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus32-Split-17-15: Split the 32-bits bus into two buses of 17 and 15 wires
//---------------------------------------------------

module va7b832_v9a2a06 (
 input [31:0] i,
 output [16:0] o1,
 output [14:0] o0
);
 assign o1 = i[31:15];
 assign o0 = i[14:0];
endmodule
//---- Top entity
module vef0f91 (
 input [14:0] vcbe66f,
 output [4:0] vfa86aa,
 output [9:0] vbdb2c8
);
 wire [0:14] w0;
 wire [0:9] w1;
 wire [0:4] w2;
 assign w0 = vcbe66f;
 assign vbdb2c8 = w1;
 assign vfa86aa = w2;
 vef0f91_v9a2a06 v9a2a06 (
  .i(w0),
  .o0(w1),
  .o1(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus15-Split-7-8 CLONE
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus15-Split-7-8: Split the 15-bits bus into two buses of 7 and 8 bits
//---------------------------------------------------

module vef0f91_v9a2a06 (
 input [14:0] i,
 output [4:0] o1,
 output [9:0] o0
);
 assign o1 = i[14:10];
 assign o0 = i[9:0];
endmodule
//---- Top entity
module v1cc648 (
 input [4:0] vd80e4f,
 input [4:0] vfad888,
 output v4642b6
);
 wire w0;
 wire [0:4] w1;
 wire [0:4] w2;
 wire w3;
 wire w4;
 wire w5;
 wire [0:3] w6;
 wire w7;
 wire [0:3] w8;
 assign v4642b6 = w0;
 assign w1 = vfad888;
 assign w2 = vd80e4f;
 v23b15b vc1b29d (
  .v4642b6(w3),
  .v27dec4(w5),
  .v6848e9(w7)
 );
 v91f34c vf38386 (
  .v427dd1(w1),
  .v53baa6(w7),
  .v479af4(w8)
 );
 v91f34c v83c3c9 (
  .v427dd1(w2),
  .v53baa6(w5),
  .v479af4(w6)
 );
 v438230 v577a36 (
  .v4642b6(w4),
  .v693354(w6),
  .v5369cd(w8)
 );
 vba518e v707c6e (
  .vcbab45(w0),
  .v0e28cb(w3),
  .v3ca442(w4)
 );
endmodule

//---------------------------------------------------
//-- comp2-5bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Comp2-5bit: Comparator of two 5-bit numbers
//---------------------------------------------------
//---- Top entity
module v23b15b (
 input v27dec4,
 input v6848e9,
 output v4642b6
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign w1 = v27dec4;
 assign v4642b6 = w2;
 assign w3 = v6848e9;
 vd12401 v955b2b (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w3)
 );
 v3676a0 vf92936 (
  .v0e28cb(w0),
  .vcbab45(w2)
 );
endmodule

//---------------------------------------------------
//-- comp2-1bit
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Comp2-1bit: Comparator of two 1-bit numbers
//---------------------------------------------------
//---- Top entity
module vd12401 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 vd12401_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

//---------------------------------------------------
//-- XOR2
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- XOR gate: two bits input xor gate
//---------------------------------------------------

module vd12401_vf4938a (
 input a,
 input b,
 output c
);
 //-- XOR gate
 //-- Verilog implementation
 
 assign c = a ^ b;
 
endmodule
//---- Top entity
module v91f34c (
 input [4:0] v427dd1,
 output v53baa6,
 output [3:0] v479af4
);
 wire [0:3] w0;
 wire [0:4] w1;
 wire w2;
 assign v479af4 = w0;
 assign w1 = v427dd1;
 assign v53baa6 = w2;
 v91f34c_v9a2a06 v9a2a06 (
  .o0(w0),
  .i(w1),
  .o1(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus5-Split-1-4
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus5-Split-1-4: Split the 5-bits bus into two buses of 1 and 4 bits
//---------------------------------------------------

module v91f34c_v9a2a06 (
 input [4:0] i,
 output o1,
 output [3:0] o0
);
 assign o1 = i[4];
 assign o0 = i[3:0];
 
endmodule
//---- Top entity
module v438230 (
 input [3:0] v693354,
 input [3:0] v5369cd,
 output v4642b6
);
 wire w0;
 wire [0:3] w1;
 wire [0:3] w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 assign v4642b6 = w0;
 assign w1 = v693354;
 assign w2 = v5369cd;
 v23b15b v09a5a5 (
  .v4642b6(w3),
  .v27dec4(w12),
  .v6848e9(w14)
 );
 v23b15b vc1b29d (
  .v4642b6(w4),
  .v27dec4(w11),
  .v6848e9(w13)
 );
 v23b15b vcd27ce (
  .v4642b6(w5),
  .v27dec4(w9),
  .v6848e9(w10)
 );
 vc4f23a vea9c80 (
  .v985fcb(w1),
  .v4f1fd3(w7),
  .vda577d(w9),
  .v3f8943(w11),
  .v64d863(w12)
 );
 vc4f23a va7dcdc (
  .v985fcb(w2),
  .v4f1fd3(w8),
  .vda577d(w10),
  .v3f8943(w13),
  .v64d863(w14)
 );
 v23b15b va0849c (
  .v4642b6(w6),
  .v27dec4(w7),
  .v6848e9(w8)
 );
 veffd42 v6e3e65 (
  .vcbab45(w0),
  .v3ca442(w3),
  .v0e28cb(w4),
  .v033bf6(w5),
  .v9eb652(w6)
 );
endmodule

//---------------------------------------------------
//-- comp2-4bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Comp2-4bit: Comparator of two 4-bit numbers
//---------------------------------------------------
//---- Top entity
module vc4f23a (
 input [3:0] v985fcb,
 output v4f1fd3,
 output vda577d,
 output v3f8943,
 output v64d863
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:3] w4;
 assign v3f8943 = w0;
 assign v64d863 = w1;
 assign vda577d = w2;
 assign v4f1fd3 = w3;
 assign w4 = v985fcb;
 vc4f23a_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .o2(w2),
  .o3(w3),
  .i(w4)
 );
endmodule

//---------------------------------------------------
//-- Bus4-Split-all
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus4-Split-all: Split the 4-bits bus into its wires
//---------------------------------------------------

module vc4f23a_v9a2a06 (
 input [3:0] i,
 output o3,
 output o2,
 output o1,
 output o0
);
 assign o3 = i[3];
 assign o2 = i[2];
 assign o1 = i[1];
 assign o0 = i[0];
endmodule
//---- Top entity
module veffd42 (
 input v9eb652,
 input v033bf6,
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign w0 = v3ca442;
 assign w1 = v9eb652;
 assign w2 = v033bf6;
 assign w3 = v0e28cb;
 assign vcbab45 = w4;
 vba518e vf3ef0f (
  .v3ca442(w0),
  .v0e28cb(w3),
  .vcbab45(w6)
 );
 vba518e vdcc53d (
  .v0e28cb(w1),
  .v3ca442(w2),
  .vcbab45(w5)
 );
 vba518e v17ac22 (
  .vcbab45(w4),
  .v0e28cb(w5),
  .v3ca442(w6)
 );
endmodule

//---------------------------------------------------
//-- AND4
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Three bits input And gate
//---------------------------------------------------
//---- Top entity
module v108a6d #(
 parameter vfffc23 = 0
) (
 output [4:0] v6ece80
);
 localparam p0 = vfffc23;
 wire [0:4] w1;
 assign v6ece80 = w1;
 v3693fc #(
  .vc5c8ea(p0)
 ) ve88537 (
  .vc8d3b9(w1)
 );
endmodule

//---------------------------------------------------
//-- 5bits-Value_0
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 5bits constant value: 0
//---------------------------------------------------
//---- Top entity
module v3693fc #(
 parameter vc5c8ea = 0
) (
 output [4:0] vc8d3b9
);
 localparam p0 = vc5c8ea;
 wire [0:4] w1;
 assign vc8d3b9 = w1;
 v3693fc_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

//---------------------------------------------------
//-- 5-bits-gen-constant
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic: 5-bits generic constant (0-31)
//---------------------------------------------------

module v3693fc_v465065 #(
 parameter VALUE = 0
) (
 output [4:0] k
);
 assign k = VALUE;
endmodule
//---- Top entity
module ve500df (
 input [31:0] ve841af,
 output [28:0] vfc82fb,
 output [2:0] vbb2522
);
 wire [0:31] w0;
 wire [0:2] w1;
 wire [0:28] w2;
 assign w0 = ve841af;
 assign vbb2522 = w1;
 assign vfc82fb = w2;
 ve500df_v9a2a06 v9a2a06 (
  .i(w0),
  .o0(w1),
  .o1(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus32-Split-29-3
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus32-Split-29-3: Split the 29-bits bus into two buses of 29 and 3 wires
//---------------------------------------------------

module ve500df_v9a2a06 (
 input [31:0] i,
 output [28:0] o1,
 output [2:0] o0
);
 assign o1 = i[31:3];
 assign o0 = i[2:0];
endmodule
//---- Top entity
module vf68661 (
 input v6dda25,
 input [31:0] vf837fe,
 input [3:0] ve9e5a1,
 input ve146f6,
 output [7:0] vfeb41a
);
 wire w0;
 wire [0:7] w1;
 wire w2;
 wire [0:7] w3;
 wire w4;
 wire [0:31] w5;
 wire [0:3] w6;
 wire w7;
 assign vfeb41a = w3;
 assign w4 = v6dda25;
 assign w5 = vf837fe;
 assign w6 = ve9e5a1;
 assign w7 = ve146f6;
 vf61fa3 v8cf02b (
  .vcbab45(w0),
  .vaf45b8(w6)
 );
 vba518e v7c2c65 (
  .v0e28cb(w0),
  .vcbab45(w2),
  .v3ca442(w7)
 );
 v468a05 v4dcb81 (
  .vc6471a(w1),
  .ve841af(w5)
 );
 v857d2e v415624 (
  .vec26ff(w1),
  .vccca56(w2),
  .v19a59f(w3),
  .v6dda25(w4)
 );
endmodule

//---------------------------------------------------
//-- Generic-comp-clk
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic component with clk input
//---------------------------------------------------
//---- Top entity
module vf61fa3 (
 input [3:0] vaf45b8,
 output vcbab45
);
 wire w0;
 wire [0:3] w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 assign vcbab45 = w0;
 assign w1 = vaf45b8;
 vc4f23a v5f4674 (
  .v985fcb(w1),
  .v4f1fd3(w2),
  .vda577d(w3),
  .v3f8943(w4),
  .v64d863(w5)
 );
 vf49321 vea932e (
  .vcbab45(w0),
  .ve86251(w2),
  .v0e28cb(w3),
  .v3ca442(w4),
  .v8b2684(w5)
 );
endmodule

//---------------------------------------------------
//-- OR-BUS4
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- OR-BUS4: OR gate with 4-bits bus input
//---------------------------------------------------
//---- Top entity
module vf49321 (
 input ve86251,
 input v0e28cb,
 input v3ca442,
 input v8b2684,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign w0 = ve86251;
 assign w1 = v0e28cb;
 assign w3 = v3ca442;
 assign vcbab45 = w5;
 assign w6 = v8b2684;
 v873425 v1edc96 (
  .v0e28cb(w0),
  .v3ca442(w1),
  .vcbab45(w2)
 );
 v873425 v5591ec (
  .v0e28cb(w2),
  .v3ca442(w3),
  .vcbab45(w4)
 );
 v873425 vdba9a4 (
  .v0e28cb(w4),
  .vcbab45(w5),
  .v3ca442(w6)
 );
endmodule

//---------------------------------------------------
//-- OR4
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- OR4: Four bits input OR gate
//---------------------------------------------------
//---- Top entity
module v873425 (
 input v0e28cb,
 input v3ca442,
 output vcbab45
);
 wire w0;
 wire w1;
 wire w2;
 assign w0 = v0e28cb;
 assign w1 = v3ca442;
 assign vcbab45 = w2;
 v873425_vf4938a vf4938a (
  .a(w0),
  .b(w1),
  .c(w2)
 );
endmodule

//---------------------------------------------------
//-- OR2
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- OR2: Two bits input OR gate
//---------------------------------------------------

module v873425_vf4938a (
 input a,
 input b,
 output c
);
 //-- OR Gate
 //-- Verilog implementation
 
 assign c = a | b;
 
 
endmodule
//---- Top entity
module v468a05 (
 input [31:0] ve841af,
 output [7:0] vdd0469,
 output [7:0] v4ba85d,
 output [7:0] vf93ecb,
 output [7:0] vc6471a
);
 wire [0:31] w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:7] w3;
 wire [0:7] w4;
 assign w0 = ve841af;
 assign vc6471a = w1;
 assign vf93ecb = w2;
 assign v4ba85d = w3;
 assign vdd0469 = w4;
 v468a05_v9a2a06 v9a2a06 (
  .i(w0),
  .o0(w1),
  .o1(w2),
  .o2(w3),
  .o3(w4)
 );
endmodule

//---------------------------------------------------
//-- Bus32-Split-quarter
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus32-Split-quarter: Split the 32-bits bus into four buses of 8 wires
//---------------------------------------------------

module v468a05_v9a2a06 (
 input [31:0] i,
 output [7:0] o3,
 output [7:0] o2,
 output [7:0] o1,
 output [7:0] o0
);
 assign o3 = i[32:24];
 assign o2 = i[23:16];
 assign o1 = i[15:8];
 assign o0 = i[7:0];
endmodule
//---- Top entity
module v857d2e (
 input v6dda25,
 input [7:0] vec26ff,
 input vccca56,
 output [7:0] v19a59f
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:3] w2;
 wire [0:3] w3;
 wire [0:3] w4;
 wire [0:3] w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign w0 = vec26ff;
 assign v19a59f = w1;
 assign w6 = v6dda25;
 assign w7 = v6dda25;
 assign w8 = vccca56;
 assign w9 = vccca56;
 assign w7 = w6;
 assign w9 = w8;
 v6bdcd9 v8e04d7 (
  .vcc8c7c(w0),
  .v651522(w2),
  .v2cc41f(w4)
 );
 vafb28f vdbcc53 (
  .va9ac17(w1),
  .v515fe7(w3),
  .v3c88fc(w5)
 );
 v370cd6 v732df5 (
  .v2856c0(w2),
  .v7891f9(w3),
  .v6dda25(w6),
  .vccca56(w8)
 );
 v370cd6 v21c6af (
  .v2856c0(w4),
  .v7891f9(w5),
  .v6dda25(w7),
  .vccca56(w9)
 );
endmodule

//---------------------------------------------------
//-- Reg-x08
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Reg-x08: 8-bits register
//---------------------------------------------------
//---- Top entity
module v6bdcd9 (
 input [7:0] vcc8c7c,
 output [3:0] v651522,
 output [3:0] v2cc41f
);
 wire [0:3] w0;
 wire [0:3] w1;
 wire [0:7] w2;
 assign v651522 = w0;
 assign v2cc41f = w1;
 assign w2 = vcc8c7c;
 v6bdcd9_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .i(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus8-Split-half
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus8-Split-half: Split the 8-bits bus into two buses of the same size
//---------------------------------------------------

module v6bdcd9_v9a2a06 (
 input [7:0] i,
 output [3:0] o1,
 output [3:0] o0
);
 assign o1 = i[7:4];
 assign o0 = i[3:0];
endmodule
//---- Top entity
module vafb28f (
 input [3:0] v515fe7,
 input [3:0] v3c88fc,
 output [7:0] va9ac17
);
 wire [0:7] w0;
 wire [0:3] w1;
 wire [0:3] w2;
 assign va9ac17 = w0;
 assign w1 = v515fe7;
 assign w2 = v3c88fc;
 vafb28f_v9a2a06 v9a2a06 (
  .o(w0),
  .i1(w1),
  .i0(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus8-Join-half
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus8-Join-half: Join the two same halves into an 8-bits Bus
//---------------------------------------------------

module vafb28f_v9a2a06 (
 input [3:0] i1,
 input [3:0] i0,
 output [7:0] o
);
 assign o = {i1, i0};
 
endmodule
//---- Top entity
module v370cd6 (
 input v6dda25,
 input [3:0] v2856c0,
 input vccca56,
 output [3:0] v7891f9
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire [0:3] w6;
 wire [0:3] w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 assign w6 = v2856c0;
 assign v7891f9 = w7;
 assign w10 = v6dda25;
 assign w11 = v6dda25;
 assign w12 = v6dda25;
 assign w13 = v6dda25;
 assign w14 = vccca56;
 assign w15 = vccca56;
 assign w16 = vccca56;
 assign w17 = vccca56;
 assign w11 = w10;
 assign w12 = w10;
 assign w12 = w11;
 assign w13 = w10;
 assign w13 = w11;
 assign w13 = w12;
 assign w15 = w14;
 assign w16 = w14;
 assign w16 = w15;
 assign w17 = w14;
 assign w17 = w15;
 assign w17 = w16;
 v22cb98 v1ba30c (
  .v27dec4(w0),
  .v4642b6(w2),
  .ve4a668(w12),
  .vd793aa(w16)
 );
 v22cb98 v38f79d (
  .v27dec4(w1),
  .v4642b6(w3),
  .ve4a668(w13),
  .vd793aa(w17)
 );
 v22cb98 v009467 (
  .v27dec4(w4),
  .v4642b6(w5),
  .ve4a668(w11),
  .vd793aa(w15)
 );
 vc4f23a vf2e2c0 (
  .v3f8943(w0),
  .v64d863(w1),
  .vda577d(w4),
  .v985fcb(w6),
  .v4f1fd3(w8)
 );
 v84f0a1 v947047 (
  .vee8a83(w2),
  .v03aaf0(w3),
  .vf8041d(w5),
  .v11bca5(w7),
  .vd84a57(w9)
 );
 v22cb98 v3a0f4c (
  .v27dec4(w8),
  .v4642b6(w9),
  .ve4a668(w10),
  .vd793aa(w14)
 );
endmodule

//---------------------------------------------------
//-- Reg-x04
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Reg-x04: 4-bits register
//---------------------------------------------------
//---- Top entity
module v22cb98 #(
 parameter v5462c0 = 0
) (
 input ve4a668,
 input v27dec4,
 input vd793aa,
 output v4642b6
);
 localparam p1 = v5462c0;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 assign w2 = ve4a668;
 assign w3 = v27dec4;
 assign v4642b6 = w5;
 assign w6 = vd793aa;
 assign w5 = w4;
 va40d2f v9ff767 (
  .v030ad0(w0),
  .vb192d0(w3),
  .v27dec4(w4),
  .v2d3366(w6)
 );
 v053dc2 #(
  .v71e305(p1)
 ) v89c757 (
  .vf54559(w0),
  .va4102a(w2),
  .ve8318d(w4)
 );
endmodule

//---------------------------------------------------
//-- 1-bit-reg
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Reg: 1-Bit register
//---------------------------------------------------
//---- Top entity
module va40d2f (
 input v27dec4,
 input vb192d0,
 input v2d3366,
 output v030ad0
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 assign v030ad0 = w0;
 assign w1 = v2d3366;
 assign w2 = v27dec4;
 assign w3 = vb192d0;
 vd0c4e5 v0f3fef (
  .v030ad0(w0),
  .v2d3366(w1),
  .vb192d0(w2),
  .v27dec4(w3)
 );
endmodule

//---------------------------------------------------
//-- MuxF-2-1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 2-to-1 Multplexer (1-bit channels). Fippled version
//---------------------------------------------------
//---- Top entity
module vd0c4e5 (
 input v27dec4,
 input vb192d0,
 input v2d3366,
 output v030ad0
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 assign v030ad0 = w0;
 assign w2 = v2d3366;
 assign w3 = v2d3366;
 assign w6 = v27dec4;
 assign w7 = vb192d0;
 assign w3 = w2;
 v873425 vaaee1f (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w4)
 );
 vba518e v569873 (
  .vcbab45(w1),
  .v3ca442(w2),
  .v0e28cb(w6)
 );
 v3676a0 v1f00ae (
  .v0e28cb(w3),
  .vcbab45(w5)
 );
 vba518e vc8527f (
  .vcbab45(w4),
  .v3ca442(w5),
  .v0e28cb(w7)
 );
endmodule

//---------------------------------------------------
//-- Mux-2-1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 2-to-1 Multplexer (1-bit channels)
//---------------------------------------------------
//---- Top entity
module v053dc2 #(
 parameter v71e305 = 0
) (
 input va4102a,
 input vf54559,
 output ve8318d
);
 localparam p2 = v71e305;
 wire w0;
 wire w1;
 wire w3;
 assign w0 = va4102a;
 assign ve8318d = w1;
 assign w3 = vf54559;
 v053dc2_vb8adf8 #(
  .INI(p2)
 ) vb8adf8 (
  .clk(w0),
  .q(w1),
  .d(w3)
 );
endmodule

//---------------------------------------------------
//-- DFF
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- D Flip-flop (verilog implementation)
//---------------------------------------------------

module v053dc2_vb8adf8 #(
 parameter INI = 0
) (
 input clk,
 input d,
 output q
);
 //-- Initial value
 reg q = INI;
 
 //-- Capture the input data  
 //-- on the rising edge of  
 //-- the system clock
 always @(posedge clk)
   q <= d;
endmodule
//---- Top entity
module v84f0a1 (
 input vd84a57,
 input vf8041d,
 input vee8a83,
 input v03aaf0,
 output [3:0] v11bca5
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:3] w4;
 assign w0 = vee8a83;
 assign w1 = v03aaf0;
 assign w2 = vf8041d;
 assign w3 = vd84a57;
 assign v11bca5 = w4;
 v84f0a1_v9a2a06 v9a2a06 (
  .i1(w0),
  .i0(w1),
  .i2(w2),
  .i3(w3),
  .o(w4)
 );
endmodule

//---------------------------------------------------
//-- Bus4-Join-all
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus4-Join-all: Join all the wires into a 4-bits Bus
//---------------------------------------------------

module v84f0a1_v9a2a06 (
 input i3,
 input i2,
 input i1,
 input i0,
 output [3:0] o
);
 assign o = {i3, i2, i1, i0};
 
endmodule
//---- Top entity
module v145d1e (
 input [31:0] vb79ed5,
 input [7:0] vc74a9c,
 input v6287a6,
 input v19f646,
 output [31:0] vb76294
);
 wire [0:31] w0;
 wire [0:31] w1;
 wire [0:7] w2;
 wire [0:7] w3;
 wire [0:7] w4;
 wire [0:31] w5;
 wire [0:31] w6;
 wire [0:31] w7;
 wire [0:7] w8;
 wire w9;
 wire w10;
 assign w6 = vb79ed5;
 assign vb76294 = w7;
 assign w8 = vc74a9c;
 assign w9 = v6287a6;
 assign w10 = v19f646;
 assign w3 = w2;
 assign w4 = w2;
 assign w4 = w3;
 v15006c v7f618a (
  .v3d79e8(w0),
  .v53354a(w6),
  .vd99bd0(w7),
  .v2d3366(w9)
 );
 v15006c vf576d8 (
  .vd99bd0(w0),
  .v53354a(w1),
  .v3d79e8(w5),
  .v2d3366(w10)
 );
 v78e0a3 v9e8b5c (
  .v7d0a31(w1),
  .v6127ee(w2),
  .v12d067(w3),
  .vea9d11(w4),
  .v29bdec(w8)
 );
 vda0861 vfb1ecd (
  .vffb58f(w2)
 );
 v2c97f6 v1dbb84 (
  .v7c9bd8(w5)
 );
endmodule

//---------------------------------------------------
//-- Generic-comp
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Componente genérico
//---------------------------------------------------
//---- Top entity
module v15006c (
 input [31:0] v53354a,
 input [31:0] v3d79e8,
 input v2d3366,
 output [31:0] vd99bd0
);
 wire [0:7] w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:31] w3;
 wire [0:31] w4;
 wire [0:31] w5;
 wire [0:7] w6;
 wire [0:7] w7;
 wire [0:7] w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire [0:7] w13;
 wire [0:7] w14;
 wire [0:7] w15;
 wire [0:7] w16;
 wire [0:7] w17;
 wire [0:7] w18;
 assign vd99bd0 = w3;
 assign w4 = v3d79e8;
 assign w5 = v53354a;
 assign w9 = v2d3366;
 assign w10 = v2d3366;
 assign w11 = v2d3366;
 assign w12 = v2d3366;
 assign w10 = w9;
 assign w11 = w9;
 assign w11 = w10;
 assign w12 = w9;
 assign w12 = w10;
 assign w12 = w11;
 v1bbb5b v41cfb0 (
  .v9d2a6a(w0),
  .v2d3366(w12),
  .v2a1cbe(w17),
  .v9d7ae8(w18)
 );
 v1bbb5b vf7893e (
  .v9d2a6a(w1),
  .v2d3366(w11),
  .v2a1cbe(w15),
  .v9d7ae8(w16)
 );
 v1bbb5b v40a6d4 (
  .v9d2a6a(w2),
  .v2d3366(w10),
  .v2a1cbe(w13),
  .v9d7ae8(w14)
 );
 v78e0a3 v2e8dfc (
  .v29bdec(w0),
  .vea9d11(w1),
  .v6127ee(w2),
  .v7d0a31(w3),
  .v12d067(w6)
 );
 v468a05 v95e147 (
  .ve841af(w5),
  .vdd0469(w7),
  .v4ba85d(w13),
  .vf93ecb(w15),
  .vc6471a(w17)
 );
 v468a05 v44f594 (
  .ve841af(w4),
  .vdd0469(w8),
  .v4ba85d(w14),
  .vf93ecb(w16),
  .vc6471a(w18)
 );
 v1bbb5b v68fd67 (
  .v9d2a6a(w6),
  .v2a1cbe(w7),
  .v9d7ae8(w8),
  .v2d3366(w9)
 );
endmodule

//---------------------------------------------------
//-- 32-bits-Mux-2-1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 2-to-1 Multplexer (32-bit channels)
//---------------------------------------------------
//---- Top entity
module v1bbb5b (
 input [7:0] v2a1cbe,
 input [7:0] v9d7ae8,
 input v2d3366,
 output [7:0] v9d2a6a
);
 wire [0:3] w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:7] w3;
 wire [0:3] w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire [0:3] w7;
 wire w8;
 wire w9;
 wire [0:3] w10;
 assign v9d2a6a = w1;
 assign w2 = v2a1cbe;
 assign w3 = v9d7ae8;
 assign w8 = v2d3366;
 assign w9 = v2d3366;
 assign w9 = w8;
 v952eda v54aed2 (
  .v6833fd(w0),
  .v54ac99(w7),
  .v2d3366(w9),
  .ve2616d(w10)
 );
 vafb28f v117a88 (
  .v3c88fc(w0),
  .va9ac17(w1),
  .v515fe7(w4)
 );
 v6bdcd9 v9f32ae (
  .vcc8c7c(w2),
  .v651522(w5),
  .v2cc41f(w7)
 );
 v6bdcd9 v9881c7 (
  .vcc8c7c(w3),
  .v651522(w6),
  .v2cc41f(w10)
 );
 v952eda v34a43a (
  .v6833fd(w4),
  .v54ac99(w5),
  .ve2616d(w6),
  .v2d3366(w8)
 );
endmodule

//---------------------------------------------------
//-- 8-bits-Mux-2-1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 2-to-1 Multplexer (8-bit channels)
//---------------------------------------------------
//---- Top entity
module v952eda (
 input [3:0] v54ac99,
 input [3:0] ve2616d,
 input v2d3366,
 output [3:0] v6833fd
);
 wire w0;
 wire w1;
 wire w2;
 wire [0:3] w3;
 wire w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 assign v6833fd = w3;
 assign w5 = ve2616d;
 assign w6 = v54ac99;
 assign w9 = v2d3366;
 assign w10 = v2d3366;
 assign w11 = v2d3366;
 assign w12 = v2d3366;
 assign w10 = w9;
 assign w11 = w9;
 assign w11 = w10;
 assign w12 = w9;
 assign w12 = w10;
 assign w12 = w11;
 vd0c4e5 v6d94c9 (
  .v030ad0(w0),
  .v2d3366(w11),
  .v27dec4(w15),
  .vb192d0(w17)
 );
 vd0c4e5 vebe465 (
  .v030ad0(w1),
  .v2d3366(w12),
  .v27dec4(w16),
  .vb192d0(w18)
 );
 vd0c4e5 ve1c21f (
  .v030ad0(w2),
  .v2d3366(w10),
  .v27dec4(w13),
  .vb192d0(w14)
 );
 v84f0a1 va44bdf (
  .vee8a83(w0),
  .v03aaf0(w1),
  .vf8041d(w2),
  .v11bca5(w3),
  .vd84a57(w4)
 );
 vd0c4e5 v2ebff3 (
  .v030ad0(w4),
  .v27dec4(w7),
  .vb192d0(w8),
  .v2d3366(w9)
 );
 vc4f23a v3c3a57 (
  .v985fcb(w5),
  .v4f1fd3(w8),
  .vda577d(w14),
  .v3f8943(w17),
  .v64d863(w18)
 );
 vc4f23a vd6d480 (
  .v985fcb(w6),
  .v4f1fd3(w7),
  .vda577d(w13),
  .v3f8943(w15),
  .v64d863(w16)
 );
endmodule

//---------------------------------------------------
//-- 4-bits-Mux-2-1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 2-to-1 Multplexer (4-bit channels)
//---------------------------------------------------
//---- Top entity
module v78e0a3 (
 input [7:0] v12d067,
 input [7:0] v6127ee,
 input [7:0] vea9d11,
 input [7:0] v29bdec,
 output [31:0] v7d0a31
);
 wire [0:31] w0;
 wire [0:7] w1;
 wire [0:7] w2;
 wire [0:7] w3;
 wire [0:7] w4;
 assign v7d0a31 = w0;
 assign w1 = v29bdec;
 assign w2 = vea9d11;
 assign w3 = v6127ee;
 assign w4 = v12d067;
 v78e0a3_v9a2a06 v9a2a06 (
  .o(w0),
  .i0(w1),
  .i1(w2),
  .i2(w3),
  .i3(w4)
 );
endmodule

//---------------------------------------------------
//-- Bus32-Join-quarter
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus32-Join-quarter: Join the four buses into an 32-bits Bus
//---------------------------------------------------

module v78e0a3_v9a2a06 (
 input [7:0] i3,
 input [7:0] i2,
 input [7:0] i1,
 input [7:0] i0,
 output [31:0] o
);
 assign o = {i3, i2, i1, i0};
 
endmodule
//---- Top entity
module vda0861 #(
 parameter vfffc23 = 0
) (
 output [7:0] vffb58f
);
 localparam p0 = vfffc23;
 wire [0:7] w1;
 assign vffb58f = w1;
 vffc517 #(
  .vc5c8ea(p0)
 ) v778577 (
  .va0aeac(w1)
 );
endmodule

//---------------------------------------------------
//-- 8bits-Value_0
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 8bits constant value: 0
//---------------------------------------------------
//---- Top entity
module vffc517 #(
 parameter vc5c8ea = 0
) (
 output [7:0] va0aeac
);
 localparam p0 = vc5c8ea;
 wire [0:7] w1;
 assign va0aeac = w1;
 vffc517_v465065 #(
  .VALUE(p0)
 ) v465065 (
  .k(w1)
 );
endmodule

//---------------------------------------------------
//-- 8-bits-gen-constant
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Generic: 8-bits generic constant (0-255)
//---------------------------------------------------

module vffc517_v465065 #(
 parameter VALUE = 0
) (
 output [7:0] k
);
 assign k = VALUE;
endmodule
//---- Top entity
module v04e061 #(
 parameter v001ed5 = 1
) (
 input vd6bebe,
 output v4642b6,
 output [4:0] vb385cd,
 output vd9f5b6
);
 localparam p1 = v001ed5;
 wire w0;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire [0:4] w8;
 wire w9;
 wire w10;
 wire w11;
 wire [0:4] w12;
 assign v4642b6 = w2;
 assign vd9f5b6 = w6;
 assign vb385cd = w8;
 assign w9 = vd6bebe;
 assign w10 = vd6bebe;
 assign w4 = w2;
 assign w5 = w3;
 assign w10 = w9;
 assign w11 = w2;
 assign w11 = w4;
 v144728 #(
  .v573b2a(p1)
 ) v04fe70 (
  .v27dec4(w0),
  .v4642b6(w2),
  .v92a149(w3),
  .v6dda25(w9)
 );
 vd30ca9 v8af589 (
  .v9fb85f(w0)
 );
 vba518e ve66489 (
  .v0e28cb(w5),
  .vcbab45(w6),
  .v3ca442(w11)
 );
 vaf1249 ve31e7c (
  .ve37344(w3),
  .ve556f1(w7),
  .v6dda25(w10),
  .va1c800(w12)
 );
 vd30ca9 va31481 (
  .v9fb85f(w7)
 );
 v51353d vabd391 (
  .v427380(w4),
  .v81cd93(w8),
  .v083523(w12)
 );
endmodule

//---------------------------------------------------
//-- start-5-bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- start-5-bit: 32 cycles width pulse
//---------------------------------------------------
//---- Top entity
module v144728 #(
 parameter v573b2a = 0
) (
 input v6dda25,
 input v27dec4,
 input v92a149,
 output v4642b6
);
 localparam p0 = v573b2a;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign w5 = v6dda25;
 assign v4642b6 = w6;
 assign w8 = v27dec4;
 assign w9 = v92a149;
 assign w7 = w6;
 v053dc2 #(
  .v71e305(p0)
 ) v24b497 (
  .vf54559(w1),
  .va4102a(w5),
  .ve8318d(w6)
 );
 vd0c4e5 vda4b54 (
  .v030ad0(w1),
  .v27dec4(w2),
  .vb192d0(w3),
  .v2d3366(w8)
 );
 vfebcfe v2141a0 (
  .v9fb85f(w2)
 );
 vd0c4e5 v75d8ff (
  .v030ad0(w3),
  .v27dec4(w4),
  .vb192d0(w7),
  .v2d3366(w9)
 );
 vd30ca9 va595cf (
  .v9fb85f(w4)
 );
endmodule

//---------------------------------------------------
//-- RS-FF-set
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- RS-FF-set. RS Flip-flop with priority set
//---------------------------------------------------
//---- Top entity
module vfebcfe (
 output v9fb85f
);
 wire w0;
 assign v9fb85f = w0;
 vfebcfe_vb2eccd vb2eccd (
  .q(w0)
 );
endmodule

//---------------------------------------------------
//-- bit-1
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Constant bit 1
//---------------------------------------------------

module vfebcfe_vb2eccd (
 output q
);
 //-- Constant bit-1
 assign q = 1'b1;
 
 
endmodule
//---- Top entity
module vaf1249 (
 input v6dda25,
 input ve556f1,
 output [4:0] va1c800,
 output ve37344
);
 wire w0;
 wire [0:4] w1;
 wire [0:4] w2;
 wire w3;
 wire [0:4] w4;
 wire w5;
 assign w0 = ve556f1;
 assign w3 = v6dda25;
 assign va1c800 = w4;
 assign ve37344 = w5;
 assign w4 = w1;
 v6ed669 vad9b51 (
  .v782748(w0),
  .vcc30ea(w1),
  .v35dd11(w2),
  .v6dda25(w3)
 );
 vd0bb30 v1e9706 (
  .vd03823(w1),
  .vb4c454(w2),
  .v4642b6(w5)
 );
endmodule

//---------------------------------------------------
//-- syscounter-rst-5bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- 5-bits Syscounter with reset
//---------------------------------------------------
//---- Top entity
module v6ed669 (
 input v6dda25,
 input v782748,
 input [4:0] v35dd11,
 output [4:0] vcc30ea
);
 wire [0:4] w0;
 wire [0:3] w1;
 wire w2;
 wire [0:3] w3;
 wire w4;
 wire [0:4] w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 assign w0 = v35dd11;
 assign vcc30ea = w5;
 assign w6 = v6dda25;
 assign w7 = v6dda25;
 assign w8 = v782748;
 assign w9 = v782748;
 assign w7 = w6;
 assign w9 = w8;
 v2be0f8 v8aa818 (
  .vf354ee(w2),
  .v4642b6(w4),
  .vd53b77(w6),
  .v27dec4(w8)
 );
 v5c75f6 vbdef88 (
  .v4de61b(w1),
  .v50034e(w3),
  .v6dda25(w7),
  .v782748(w9)
 );
 v91f34c v122992 (
  .v427dd1(w0),
  .v479af4(w1),
  .v53baa6(w2)
 );
 vcdce79 v93fefd (
  .v167ed7(w3),
  .vee8a83(w4),
  .v6a2e9e(w5)
 );
endmodule

//---------------------------------------------------
//-- DFF-rst-x05
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- DFF-rst-x05: Five D flip-flops in paralell with reset
//---------------------------------------------------
//---- Top entity
module v2be0f8 #(
 parameter vbd3217 = 0
) (
 input vd53b77,
 input v27dec4,
 input vf354ee,
 output v4642b6
);
 localparam p5 = vbd3217;
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w6;
 assign w2 = v27dec4;
 assign w3 = vf354ee;
 assign v4642b6 = w4;
 assign w6 = vd53b77;
 v3676a0 v7539bf (
  .vcbab45(w1),
  .v0e28cb(w2)
 );
 vba518e vfe8158 (
  .vcbab45(w0),
  .v0e28cb(w1),
  .v3ca442(w3)
 );
 v053dc2 #(
  .v71e305(p5)
 ) vd104a4 (
  .vf54559(w0),
  .ve8318d(w4),
  .va4102a(w6)
 );
endmodule

//---------------------------------------------------
//-- DFF-rst-x01
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0
//---------------------------------------------------
//---- Top entity
module v5c75f6 (
 input v6dda25,
 input v782748,
 input [3:0] v4de61b,
 output [3:0] v50034e
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire [0:3] w6;
 wire [0:3] w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 assign w6 = v4de61b;
 assign v50034e = w7;
 assign w10 = v6dda25;
 assign w11 = v6dda25;
 assign w12 = v6dda25;
 assign w13 = v6dda25;
 assign w14 = v782748;
 assign w15 = v782748;
 assign w16 = v782748;
 assign w17 = v782748;
 assign w11 = w10;
 assign w12 = w10;
 assign w12 = w11;
 assign w13 = w10;
 assign w13 = w11;
 assign w13 = w12;
 assign w15 = w14;
 assign w16 = w14;
 assign w16 = w15;
 assign w17 = w14;
 assign w17 = w15;
 assign w17 = w16;
 vc4f23a v4b1225 (
  .v3f8943(w2),
  .v64d863(w3),
  .vda577d(w4),
  .v985fcb(w6),
  .v4f1fd3(w8)
 );
 v84f0a1 v6491fd (
  .v03aaf0(w0),
  .vee8a83(w1),
  .vf8041d(w5),
  .v11bca5(w7),
  .vd84a57(w9)
 );
 v2be0f8 v10a04f (
  .v4642b6(w0),
  .vf354ee(w3),
  .vd53b77(w13),
  .v27dec4(w17)
 );
 v2be0f8 v7d9648 (
  .v4642b6(w1),
  .vf354ee(w2),
  .vd53b77(w12),
  .v27dec4(w16)
 );
 v2be0f8 v004b14 (
  .vf354ee(w4),
  .v4642b6(w5),
  .vd53b77(w11),
  .v27dec4(w15)
 );
 v2be0f8 v8aa818 (
  .vf354ee(w8),
  .v4642b6(w9),
  .vd53b77(w10),
  .v27dec4(w14)
 );
endmodule

//---------------------------------------------------
//-- DFF-rst-x04
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- DFF-rst-x04: Three D flip-flops in paralell with reset
//---------------------------------------------------
//---- Top entity
module vcdce79 (
 input vee8a83,
 input [3:0] v167ed7,
 output [4:0] v6a2e9e
);
 wire [0:4] w0;
 wire w1;
 wire [0:3] w2;
 assign v6a2e9e = w0;
 assign w1 = vee8a83;
 assign w2 = v167ed7;
 vcdce79_v9a2a06 v9a2a06 (
  .o(w0),
  .i1(w1),
  .i0(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus5-Join-1-4
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus5-Join-1-4: Join the two buses of 1 and 4 bits into a 5-bits Bus
//---------------------------------------------------

module vcdce79_v9a2a06 (
 input i1,
 input [3:0] i0,
 output [4:0] o
);
 assign o = {i1, i0};
 
endmodule
//---- Top entity
module vd0bb30 #(
 parameter v6c5139 = 1
) (
 input [4:0] vd03823,
 output v4642b6,
 output [4:0] vb4c454
);
 localparam p1 = v6c5139;
 wire w0;
 wire [0:4] w2;
 wire [0:4] w3;
 assign v4642b6 = w0;
 assign w2 = vd03823;
 assign vb4c454 = w3;
 va17f79 #(
  .vd73390(p1)
 ) vc288d0 (
  .v4642b6(w0),
  .va6f14e(w2),
  .v919f01(w3)
 );
endmodule

//---------------------------------------------------
//-- Inc1-5bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Inc1-5bit: Increment a 5-bits number by one
//---------------------------------------------------
//---- Top entity
module va17f79 #(
 parameter vd73390 = 0
) (
 input [4:0] va6f14e,
 output v4642b6,
 output [4:0] v919f01
);
 localparam p1 = vd73390;
 wire w0;
 wire [0:4] w2;
 wire [0:4] w3;
 wire [0:4] w4;
 assign v4642b6 = w0;
 assign w3 = va6f14e;
 assign v919f01 = w4;
 v0cfc7a v530cb5 (
  .v4642b6(w0),
  .v225d34(w2),
  .vbb6b94(w3),
  .vae8b91(w4)
 );
 v3693fc #(
  .vc5c8ea(p1)
 ) v809c3c (
  .vc8d3b9(w2)
 );
endmodule

//---------------------------------------------------
//-- AdderK-5bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- AdderK-5bit: Adder of 5-bit operand and 5-bit constant
//---------------------------------------------------
//---- Top entity
module v0cfc7a (
 input [4:0] v225d34,
 input [4:0] vbb6b94,
 output v4642b6,
 output [4:0] vae8b91
);
 wire w0;
 wire w1;
 wire [0:4] w2;
 wire [0:4] w3;
 wire [0:4] w4;
 wire w5;
 wire [0:3] w6;
 wire w7;
 wire [0:3] w8;
 wire w9;
 wire [0:3] w10;
 assign w2 = vbb6b94;
 assign w3 = v225d34;
 assign vae8b91 = w4;
 assign v4642b6 = w5;
 vad119b vb8ad86 (
  .v0ef266(w0),
  .v8e8a67(w1),
  .v4642b6(w5),
  .v27dec4(w7),
  .v82de4f(w9)
 );
 v91f34c v144430 (
  .v427dd1(w2),
  .v53baa6(w9),
  .v479af4(w10)
 );
 v91f34c v09d2c7 (
  .v427dd1(w3),
  .v53baa6(w7),
  .v479af4(w8)
 );
 v25966b vd35762 (
  .v4642b6(w0),
  .v817794(w6),
  .v0550b6(w8),
  .v24708e(w10)
 );
 vcdce79 v758283 (
  .vee8a83(w1),
  .v6a2e9e(w4),
  .v167ed7(w6)
 );
endmodule

//---------------------------------------------------
//-- Adder-5bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Adder-5bits: Adder of two operands of 5 bits
//---------------------------------------------------
//---- Top entity
module vad119b (
 input v27dec4,
 input v82de4f,
 input v0ef266,
 output v4642b6,
 output v8e8a67
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 assign v8e8a67 = w1;
 assign v4642b6 = w5;
 assign w6 = v27dec4;
 assign w7 = v27dec4;
 assign w8 = v82de4f;
 assign w9 = v82de4f;
 assign w10 = v0ef266;
 assign w11 = v0ef266;
 assign w2 = w0;
 assign w7 = w6;
 assign w9 = w8;
 assign w11 = w10;
 vd12401 v2e3d9f (
  .vcbab45(w0),
  .v0e28cb(w7),
  .v3ca442(w9)
 );
 vd12401 vb50462 (
  .v0e28cb(w0),
  .vcbab45(w1),
  .v3ca442(w11)
 );
 vba518e v4882f4 (
  .v3ca442(w2),
  .vcbab45(w3),
  .v0e28cb(w10)
 );
 vba518e v8fcf41 (
  .vcbab45(w4),
  .v0e28cb(w6),
  .v3ca442(w8)
 );
 v873425 vc5b8b9 (
  .v3ca442(w3),
  .v0e28cb(w4),
  .vcbab45(w5)
 );
endmodule

//---------------------------------------------------
//-- AdderC-1bit
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- AdderC-1bit: Adder of two operands of 1 bit plus the carry in
//---------------------------------------------------
//---- Top entity
module v25966b (
 input [3:0] v0550b6,
 input [3:0] v24708e,
 output v4642b6,
 output [3:0] v817794
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:3] w5;
 wire [0:3] w6;
 wire [0:3] w7;
 wire w8;
 wire w9;
 wire w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 wire w17;
 wire w18;
 assign w5 = v24708e;
 assign w6 = v0550b6;
 assign v817794 = w7;
 assign v4642b6 = w9;
 v1ea21d vdbe125 (
  .v4642b6(w0),
  .v8e8a67(w2),
  .v27dec4(w15),
  .v82de4f(w18)
 );
 vad119b vb8ad86 (
  .v0ef266(w0),
  .v8e8a67(w1),
  .v4642b6(w3),
  .v27dec4(w14),
  .v82de4f(w17)
 );
 vad119b v5d29b2 (
  .v0ef266(w3),
  .v8e8a67(w4),
  .v4642b6(w8),
  .v27dec4(w12),
  .v82de4f(w16)
 );
 vc4f23a vf4a6ff (
  .v985fcb(w5),
  .v4f1fd3(w13),
  .vda577d(w16),
  .v3f8943(w17),
  .v64d863(w18)
 );
 vc4f23a v9d4632 (
  .v985fcb(w6),
  .v4f1fd3(w11),
  .vda577d(w12),
  .v3f8943(w14),
  .v64d863(w15)
 );
 v84f0a1 v140dbf (
  .vee8a83(w1),
  .v03aaf0(w2),
  .vf8041d(w4),
  .v11bca5(w7),
  .vd84a57(w10)
 );
 vad119b v5c5937 (
  .v0ef266(w8),
  .v4642b6(w9),
  .v8e8a67(w10),
  .v27dec4(w11),
  .v82de4f(w13)
 );
endmodule

//---------------------------------------------------
//-- Adder-4bits
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Adder-4bits: Adder of two operands of 4 bits
//---------------------------------------------------
//---- Top entity
module v1ea21d (
 input v27dec4,
 input v82de4f,
 output v4642b6,
 output v8e8a67
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 assign w0 = v82de4f;
 assign w1 = v27dec4;
 assign v4642b6 = w3;
 assign v8e8a67 = w4;
 vad119b vb820a1 (
  .v82de4f(w0),
  .v27dec4(w1),
  .v0ef266(w2),
  .v4642b6(w3),
  .v8e8a67(w4)
 );
 vd30ca9 v23ebb6 (
  .v9fb85f(w2)
 );
endmodule

//---------------------------------------------------
//-- Adder-1bit
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Adder-1bit: Adder of two operands of 1 bit
//---------------------------------------------------
//---- Top entity
module v51353d (
 input [4:0] v083523,
 input v427380,
 output [4:0] v81cd93
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire w5;
 wire w6;
 wire w7;
 wire [0:4] w8;
 wire w9;
 wire [0:4] w10;
 wire w11;
 wire w12;
 wire w13;
 wire w14;
 wire w15;
 wire w16;
 assign w1 = v427380;
 assign w2 = v427380;
 assign w6 = v427380;
 assign w8 = v083523;
 assign v81cd93 = w10;
 assign w13 = v427380;
 assign w14 = v427380;
 assign w2 = w1;
 assign w6 = w1;
 assign w6 = w2;
 assign w13 = w1;
 assign w13 = w2;
 assign w13 = w6;
 assign w14 = w1;
 assign w14 = w2;
 assign w14 = w6;
 assign w14 = w13;
 vba518e v984c00 (
  .v0e28cb(w0),
  .v3ca442(w2),
  .vcbab45(w3)
 );
 vba518e v63c547 (
  .v3ca442(w1),
  .vcbab45(w4),
  .v0e28cb(w9)
 );
 vba518e v017827 (
  .v0e28cb(w5),
  .v3ca442(w6),
  .vcbab45(w7)
 );
 v60f5a9 v3aadcd (
  .v3f8943(w0),
  .vda577d(w5),
  .v427dd1(w8),
  .v64d863(w9),
  .v53baa6(w11),
  .v4f1fd3(w12)
 );
 v36cddd v6e87bf (
  .vee8a83(w3),
  .v03aaf0(w4),
  .vf8041d(w7),
  .v6a2e9e(w10),
  .vd84a57(w15),
  .v684b0d(w16)
 );
 vba518e vd994d2 (
  .v0e28cb(w12),
  .v3ca442(w13),
  .vcbab45(w15)
 );
 vba518e v0bd924 (
  .v0e28cb(w11),
  .v3ca442(w14),
  .vcbab45(w16)
 );
endmodule

//---------------------------------------------------
//-- AND-Busen-5
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- AND-Busen-5: Enable a 5-bits bus. When the enable signal is 0, the output is 0
//---------------------------------------------------
//---- Top entity
module v60f5a9 (
 input [4:0] v427dd1,
 output v53baa6,
 output v4f1fd3,
 output vda577d,
 output v3f8943,
 output v64d863
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire w4;
 wire [0:4] w5;
 assign v3f8943 = w0;
 assign v64d863 = w1;
 assign vda577d = w2;
 assign v4f1fd3 = w3;
 assign v53baa6 = w4;
 assign w5 = v427dd1;
 v60f5a9_v9a2a06 v9a2a06 (
  .o1(w0),
  .o0(w1),
  .o2(w2),
  .o3(w3),
  .o4(w4),
  .i(w5)
 );
endmodule

//---------------------------------------------------
//-- Bus5-Split-all
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus5-Split-all: Split the 5-bits bus into its wires
//---------------------------------------------------

module v60f5a9_v9a2a06 (
 input [4:0] i,
 output o4,
 output o3,
 output o2,
 output o1,
 output o0
);
 assign o4 = i[4];
 assign o3 = i[3];
 assign o2 = i[2];
 assign o1 = i[1];
 assign o0 = i[0];
endmodule
//---- Top entity
module v36cddd (
 input v684b0d,
 input vd84a57,
 input vf8041d,
 input vee8a83,
 input v03aaf0,
 output [4:0] v6a2e9e
);
 wire w0;
 wire w1;
 wire [0:4] w2;
 wire w3;
 wire w4;
 wire w5;
 assign w0 = vee8a83;
 assign w1 = v03aaf0;
 assign v6a2e9e = w2;
 assign w3 = vf8041d;
 assign w4 = vd84a57;
 assign w5 = v684b0d;
 v36cddd_v9a2a06 v9a2a06 (
  .i1(w0),
  .i0(w1),
  .o(w2),
  .i2(w3),
  .i3(w4),
  .i4(w5)
 );
endmodule

//---------------------------------------------------
//-- Bus5-Join-all
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus5-Join-all: Join all the wires into a 5-bits Bus
//---------------------------------------------------

module v36cddd_v9a2a06 (
 input i4,
 input i3,
 input i2,
 input i1,
 input i0,
 output [4:0] o
);
 assign o = {i4, i3, i2, i1, i0};
 
endmodule
//---- Top entity
module vd63ed7 (
 input [7:0] vcc8c7c,
 output [4:0] v52d10b,
 output [2:0] v1045ee
);
 wire [0:7] w0;
 wire [0:4] w1;
 wire [0:2] w2;
 assign w0 = vcc8c7c;
 assign v52d10b = w1;
 assign v1045ee = w2;
 vd63ed7_v9a2a06 v9a2a06 (
  .i(w0),
  .o1(w1),
  .o0(w2)
 );
endmodule

//---------------------------------------------------
//-- Bus8-Split-5-3
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus8-Split-5-3: Split the 8-bits bus into two buses of 5 and 3 wires
//---------------------------------------------------

module vd63ed7_v9a2a06 (
 input [7:0] i,
 output [4:0] o1,
 output [2:0] o0
);
 assign o1 = i[7:3];
 assign o0 = i[2:0];
endmodule
//---- Top entity
module v1b8919 (
 input [2:0] v23a690,
 output [2:0] v9c69dc
);
 wire w0;
 wire w1;
 wire w2;
 wire w3;
 wire [0:2] w4;
 wire [0:2] w5;
 wire w6;
 wire w7;
 assign w4 = v23a690;
 assign v9c69dc = w5;
 v3676a0 v214cf3 (
  .v0e28cb(w0),
  .vcbab45(w1)
 );
 v3676a0 v8b12b1 (
  .v0e28cb(w2),
  .vcbab45(w3)
 );
 v9a2795 v65cc06 (
  .v3f8943(w0),
  .v64d863(w2),
  .vdee7c7(w4),
  .vda577d(w7)
 );
 v2b9b8c v34e16c (
  .vee8a83(w1),
  .v03aaf0(w3),
  .ve52f8a(w5),
  .vf8041d(w6)
 );
 v3676a0 vdd82d5 (
  .vcbab45(w6),
  .v0e28cb(w7)
 );
endmodule

//---------------------------------------------------
//-- not-x3
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- not-x3: 3-bits not gate
//---------------------------------------------------
//---- Top entity
module v2b9b8c (
 input vf8041d,
 input vee8a83,
 input v03aaf0,
 output [2:0] ve52f8a
);
 wire w0;
 wire w1;
 wire [0:2] w2;
 wire w3;
 assign w0 = vee8a83;
 assign w1 = v03aaf0;
 assign ve52f8a = w2;
 assign w3 = vf8041d;
 v2b9b8c_v9a2a06 v9a2a06 (
  .i1(w0),
  .i0(w1),
  .o(w2),
  .i2(w3)
 );
endmodule

//---------------------------------------------------
//-- Bus3-Join-all
//-- - - - - - - - - - - - - - - - - - - - - - - - --
//-- Bus3-Join-all: Joint three wires into a 3-bits Bus
//---------------------------------------------------

module v2b9b8c_v9a2a06 (
 input i2,
 input i1,
 input i0,
 output [2:0] o
);
 assign o = {i2, i1, i0};
 
endmodule
