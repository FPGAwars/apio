{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Apio is an easy-to-install and easy-to-use open-source toolbox that simplifies FPGA development. It provides simple commands such as:</p> <ul> <li><code>apio lint</code> \u2013 to verify the code</li> <li><code>apio sim</code> \u2013 to simulate the design</li> <li><code>apio upload</code> \u2013 to build the design and program the FPGA board</li> </ul> <p>Apio runs on macOS, Linux, and Windows, and currently supports:</p> <ul> <li>3 FPGA architectures</li> <li>70+ FPGAs</li> <li>70+ FPGA boards</li> </ul> <p>\u2026and the list continues to grow.</p> <p>This page offers a showcase of some of Apio's features, detailed further in the sidebar sections. After reviewing this introduction, we recommend starting with the Quick start section.</p> <ul> <li>The examples here use the Alhambra-II FPGA board, though other supported boards should work similarly.</li> <li>Some logs in the examples below have been truncated for clarity.</li> </ul>"},{"location":"#apio-project-examples","title":"Apio project examples","text":"<p>Currently there are 60+ project examples that are included with Apio. To list them, run the following command:</p> <pre><code>$ apio examples\n\nApio Examples\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 BOARD/EXAMPLE                \u2502 ARCH  \u2502 DESCRIPTION           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n...\n\u2502 alhambra-ii/bcd-counter      \u2502 ice40 \u2502 Verilog example...    \u2502\n\u2502 alhambra-ii/blinky           \u2502 ice40 \u2502 Blinking led          \u2502\n\u2502 alhambra-ii/getting-started  \u2502 ice40 \u2502 Example for Apio...   \u2502\n\u2502 alhambra-ii/ledon            \u2502 ice40 \u2502 Turning on a led      \u2502\n...\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nTotal of 63 examples\n</code></pre> <p>Let's fetch the <code>getting-started</code> example of the <code>alhambra-ii</code> board.</p> <pre><code>$ mkdir example\n$ cd example\n\n# Fetch the example's files.\nexample$ apio examples fetch alhambra-ii/getting-started\n\n# List the files.\nexample$ tree .\n.\n\u251c\u2500\u2500 apio.ini\n\u251c\u2500\u2500 main_tb.gtkw\n\u251c\u2500\u2500 main_tb.v\n\u251c\u2500\u2500 main.v\n\u2514\u2500\u2500 pinout.pcf\n</code></pre> <p>Now let's build the example and program our Alhambra-II FPGA board.</p> <pre><code>example$ apio upload\n</code></pre> <p>And Voil\u00e0! - the design is now running on the FPGA board.</p>"},{"location":"#analyzing-utilization-and-speed","title":"Analyzing utilization and speed.","text":"<p>To check how many FPGA resources the design uses and how fast it can run, use the <code>apio report</code> command</p> <pre><code>example$ apio report\n\nFPGA Resource Utilization\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  RESOURCE      \u2502  USED  \u2502   TOTAL  \u2502  UTIL.  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  ICESTORM_LC   \u2502    69  \u2502    7680  \u2502     0%  \u2502\n\u2502  ICESTORM_PLL  \u2502        \u2502       2  \u2502         \u2502\n\u2502  ICESTORM_RAM  \u2502        \u2502      32  \u2502         \u2502\n\u2502  SB_GB         \u2502     2  \u2502       8  \u2502    25%  \u2502\n\u2502  SB_IO         \u2502     3  \u2502     256  \u2502     1%  \u2502\n\u2502  SB_WARMBOOT   \u2502        \u2502       1  \u2502         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nClock Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  CLOCK  \u2502  MAX SPEED [Mhz]  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  CLK    \u2502           101.93  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#formatting-the-source-code","title":"Formatting the source code","text":"<p>Formatting the source code is as simple as running the <code>apio format</code> command.</p> <pre><code>work2$ apio format\n\nUsing env default (alhambra-ii)\nFormatting main.v\nFormatting main_tb.v\nProcessed 2 files.\n</code></pre>"},{"location":"#verifying-the-source-code","title":"Verifying the source code","text":"<p>The command <code>apio lint</code> performs 'nitpicking' verification of the code and reports any issues it finds, like the one we intentionally created for this example.</p> <pre><code>work2$ apio lint\n...\nTestbench main_tb.v\n...\n%Warning-NULLPORT: main.v:8:1: Null port on module (perhaps extraneous comma)\n    8 | );\n      | ^\n                   ... For warning description see https://verilator.org/warn/NULLPORT?v=5.037\n                   ... Use \"/* verilator lint_off NULLPORT */\" and lint_on around source to disable this message.\n</code></pre>"},{"location":"#simulating-the-design","title":"Simulating the design","text":"<p>The command <code>apio sim</code> runs a simulation of a selected testbench and shows its result in an interactive graphical window.</p> <pre><code>work$ apio sim main_tb.v\n</code></pre> <p></p>"},{"location":"#testing-the-design","title":"Testing the design","text":"<p>The command <code>apio test</code> simulates all the testbenches in batch mode and fails if any assertions fail with a call to <code>$fatal</code>.</p> <pre><code>work2$ apio test\n...\nvvp _build/default/main_tb.out -dumpfile=_build/default/main_tb.vcd\nVCD info: dumpfile _build/default/main_tb.vcd opened for output.\nmain_tb.v:47: $finish called at 966000 (1ps)\n</code></pre>"},{"location":"#commands-help","title":"Commands help","text":"<p>Every apio command accepts the <code>--help</code> or <code>-h</code> flag, which prints a short description of the command. When a command has multiple levels, the help flag can be used at any level, for example: <code>apio -h</code>, <code>apio examples -h</code>, and <code>apio examples list -h</code>.</p> <pre><code>$ apio clean -h\nUsage: apio clean [OPTIONS]\n\n  The command 'apio clean' removes all the output files previously\n  generated by apio commands.\n\n  Example:\n    apio clean\n\nOptions:\n  -p, --project-dir path  Set the root directory for the project.\n  -h, --help              Show this message and exit.\n</code></pre> <p>This concludes Apio's overview. We suggest continuing to the Quick Start guide or jump to the Installation or</p>"},{"location":"apio-repositories/","title":"Apio Repositories","text":"<p>Apio uses GitHub repositories under the <code>FPGAwars</code> organization for its source code, documentation, daily builds, and runtime packages.</p> Repository Description Platforms FPGAwars/apio Apio main repo. All FPGAwars/apio-dev-builds Apio daily builds All FPGAwars/apio-examples Package <code>examples</code> All FPGAwars/tools-oss-cad-suite Package <code>oss-cad-suite</code> All FPGAwars/tools-verible Package <code>verible</code> All FPGAwars/tools-graphviz Package <code>graphviz</code> Windows FPGAwars/tools-drivers Package <code>drivers</code> Windows <p>For easier tracking and maintenance, all bug reports and discussions are consolidated in the main Apio repository: fpgawars/apio, which also serves as the project\u2019s homepage.</p>"},{"location":"board-drivers/","title":"FPGA Board Drivers","text":"<p>Some FPGA boards require a system driver before the programmer can access them. When this is the case, install the driver with the <code>apio drivers install</code> command.</p> <p>Apio provides two types of driver: <code>ftdi</code> and <code>serial</code>. The table below compares them.</p> <ul> <li> <p>Driver installation is not required on macOS.</p> </li> <li> <p>If the FPGA board appears in the device list with <code>--unavail--</code> manufacturer or product strings, the appropriate driver probably needs to be installed.</p> </li> </ul> FTDI driver Serial driver Platforms Linux, Windows Linux, Windows Driver install <code>apio drivers install ftdi</code> <code>apio drivers install serial</code> Driver uninstall <code>apio drivers uninstall ftdi</code> <code>apio drivers uninstall serial</code> List devices <code>apio devices usb</code> <code>apio devices serial</code>"},{"location":"cmd-apio-api/","title":"Apio api","text":""},{"location":"cmd-apio-api/#apio-api_1","title":"apio api","text":"<p>The command group <code>apio apio</code> contains subcommands that that are intended to be used by tools and programs such as Icestudio, rather than being used directly by users.</p> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre> Subcommands <pre><code>apio api get-system\napio api get-boards\napio api get-fpgas\napio api get-examples\napio api get-commands\napio api scan-devices\n</code></pre>"},{"location":"cmd-apio-api/#apio-api-get-system","title":"apio api get-system","text":"<p>The command <code>apio api get-system</code> exports information about apio and the underlying system as a JSON foc. It is similar to the command <code>apio info system</code> which is intended for human consumption.</p> <p>The optional flag <code>--timestamp</code> allows the caller to embed in the JSON document a known timestamp that allows to verify that the JSON document was indeed was generated by the same invocation.</p> Examples <pre><code>apio api get-system                # Write to stdout\napio api get-system  -o apio.json  # Write to a file\n</code></pre> Options <pre><code>-t, --timestamp text    Set a user provided timestamp.\n-o, --output file-name  Set output file.\n-f, --force             Overwrite output file.\n-h, --help              Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-api/#apio-api-get-project","title":"apio api get-project","text":"<p>The command <code>apio api get-project</code> exports information about an Apio project as a JSON foc.</p> <p>The optional flag <code>--timestamp</code> allows the caller to embed in the JSON document a known timestamp that allows to verify that the JSON document was indeed was generated by the same invocation.</p> Examples <pre><code>apio api get-project               # Report default env\napio api get-project -e env1       # Report specified env\napio api get-project -p foo/bar    # Project in another dir\napio api get-project -o apio.json  # Write to a file\n</code></pre> Options <pre><code>-e, --env name          Set the apio.ini env.\n-p, --project-dir path  Set the root directory for the project.\n-t, --timestamp text    Set a user provided timestamp.\n-o, --output file-name  Set output file.\n-f, --force             Overwrite output file.\n-h, --help              Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-api/#apio-api-get-boards","title":"apio api get-boards","text":"<p>The command <code>apio api get-boards</code> exports apio boards information as a JSON document.</p> <p>The optional flag <code>--timestamp</code> allows the caller to embed in the JSON document a known timestamp that allows to verify that the JSON document was indeed was generated by the same invocation.</p> Examples <pre><code>    apio api get-boards                # Write to stdout\n    apio api get-boards  -o apio.json  # Write to a file\n</code></pre> Options <pre><code>  -t, --timestamp text    Set a user provided timestamp.\n  -o, --output file-name  Set output file.\n  -f, --force             Overwrite output file.\n  -h, --help              Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-api/#apio-api-get-fpgas","title":"apio api get-fpgas","text":"<p>The command <code>apio api get-fpgas</code> exports apio FPGAss information as a JSON document.</p> <p>The optional flag <code>--timestamp</code> allows the caller to embed in the JSON document a known timestamp that allows to verify that the JSON document was indeed was generated by the same invocation.</p> Examples <pre><code>apio api get-fpgas                # Write to stdout\napio api get-fpgas  -o apio.json  # Write to a file\n</code></pre> Options <pre><code>-t, --timestamp text    Set a user provided timestamp.\n-o, --output file-name  Set output file.\n-f, --force             Overwrite output file.\n-h, --help              Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-api/#apio-api-get-examples","title":"apio api get-examples","text":"<p>The command <code>apio api get-examples</code> exports apio examples information as a JSON document.</p> <p>The optional flag <code>--timestamp</code> allows the caller to embed in the JSON document a known timestamp that allows to verify that the JSON document was indeed was generated by the same invocation.</p> Examples <pre><code>apio api get-examples               # Write to stdout\napio api get-examples -o apio.json  # Write to a file\n</code></pre> Options <pre><code>-t, --timestamp text    Set a user provided timestamp.\n-o, --output file-name  Set output file.\n-f, --force             Overwrite output file.\n-h, --help              Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-api/#apio-api-get-commands","title":"apio api get-commands","text":"<p>The command <code>apio api get-commands</code> exports apio command structure of Apio as a JSON docs. This is used by various tools such as documentation generators and tests.</p> <p>The optional flag <code>--timestamp</code> allows the caller to embed in the JSON document a known timestamp that allows to verify that the JSON document was indeed was generated by the same invocation.</p> Examples <pre><code>apio api get-commands                # Write to stdout\napio api get-commands  -o apio.json  # Write to a file\n</code></pre> Options <pre><code>-t, --timestamp text    Set a user provided timestamp.\n-o, --output file-name  Set output file.\n-f, --force             Overwrite output file.\n-h, --help              Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-api/#apio-api-get-devices","title":"apio api get-devices","text":"<p>The command <code>apio</code> api scan-devices' scans and report the available usb and serial devices.</p> <p>The optional flag '--timestamp' allows the caller to embed in the JSON document a known timestamp that allows to verify that the JSON document was indeed was generated by the same invocation.</p> Examples <pre><code>apio api scan-devices                # Write to stdout\napio api scan-devices  -o apio.json  # Write to a file\n</code></pre> Options <pre><code>  -t, --timestamp text    Set a user provided timestamp.\n  -o, --output file-name  Set output file.\n  -f, --force             Overwrite output file.\n  -h, --help              Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-boards/","title":"Apio boards","text":""},{"location":"cmd-apio-boards/#apio-boards_1","title":"apio boards","text":"<p>The <code>apio boards</code> command lists the FPGA boards supported by Apio.</p> <p>You can define custom boards by placing a <code>boards.jsonc</code> file with your board definition in your project directory, which overrides Apio\u2019s default <code>boards.jsonc</code>.</p> Examples <pre><code>apio boards                   # List all boards.\napio boards -v                # List with extra columns.\napio boards | grep ecp5       # Filter boards results.\napio boards --docs            # Generate a report for Apio docs\n</code></pre> Options <pre><code>-v, --verbose           Show detailed output.\n-p, --project-dir path  Set the root directory for the project.\n-h, --help              Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-build/","title":"Apio build","text":""},{"location":"cmd-apio-build/#apio-build_1","title":"apio build","text":"<p>The <code>apio build</code> command compiles the project's source files and generates a bitstream ready for upload to the FPGA.</p> Examples <pre><code>apio build                   # Typical Usage\napio build -e debug          # Use a specific environment from apio.ini\napio build -v                # Show all verbose output\napio build --verbose-synth   # Verbose synthesis info\napio build --verbose-pnr     # Verbose place and route info\n</code></pre> Options <pre><code>-e, --env name            Use a named environment from apio.ini\n-p, --project-dir path    Set the project's root directory\n-v, --verbose             Show all verbose output\n    --verbose-synth       Show verbose synthesis stage output\n    --verbose-pnr         Show verbose place-and-route stage output\n-h, --help                Show help message and exit\n</code></pre> Notes <ul> <li>Specify the top module using the <code>top-module</code> option in <code>apio.ini</code>.</li> <li>Testbench files (<code>*_tb.v</code> and <code>*_tb.sv</code>) are ignored during build.</li> <li>Running <code>apio build</code> before <code>apio upload</code> is usually unnecessary.</li> <li>Run <code>apio clean</code> before building to force a full rebuild.</li> </ul>"},{"location":"cmd-apio-clean/","title":"apio clean","text":"<p>Apio clean</p>"},{"location":"cmd-apio-clean/#apio-clean","title":"apio clean","text":"<p>The <code>apio clean</code> command removes all build output files previously generated by Apio.</p> Examples <pre><code>apio clean                      # Clean current project directory\napio clean -p /projects/blinky  # Clean a specific project directory\n</code></pre> Options <pre><code>-p, --project-dir path  Specify the root directory of the project\n-h, --help              Show help message and exit\n</code></pre>"},{"location":"cmd-apio-create/","title":"Apio create","text":""},{"location":"cmd-apio-create/#apio-create_1","title":"apio create","text":"<p>The <code>apio create</code> command initializes a new <code>apio.ini</code> file. Use it to start a new Apio project.</p> <p>This command only generates a new <code>apio.ini</code> file. To create a full,   buildable project, use <code>apio examples</code> to fetch a template for your board.</p> Examples <pre><code>apio create --board alhambra-ii\napio create --board alhambra-ii --top-module MyModule\n</code></pre> Options <pre><code>-b, --board BOARD        Specify the target board. [required]\n-t, --top-module name    Set the top-level module name.\n-p, --project-dir path   Specify the project root directory.\n-h, --help               Show help message and exit.\n</code></pre>"},{"location":"cmd-apio-devices/","title":"Apio devices","text":""},{"location":"cmd-apio-devices/#apio-devices_1","title":"apio devices","text":"<p>The <code>apio devices</code> command group lists devices connected to your computer. It is mainly used for diagnosing connectivity or driver issues.</p> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre> Subcommands <pre><code>apio devices usb\napio devices serial\n</code></pre>"},{"location":"cmd-apio-devices/#apio-devices-usb","title":"apio devices usb","text":"<p>The command <code>apio devices usb</code> displays the USB devices currently connected to your computer. It is useful for diagnosing FPGA board connectivity issues.</p> Examples <pre><code>apio devices usb    # List USB devices.\n</code></pre> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre> <p>Example output</p> <p></p>"},{"location":"cmd-apio-devices/#apio-devices-serial","title":"apio devices serial","text":"<p>The command <code>apio devices serial</code> displays the serial devices currently connected to your computer. It is useful for diagnosing FPGA board connectivity issues.</p> Examples <pre><code>apio devices serial    # List serial devices.\n</code></pre> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre> Notes <ul> <li> <p>Devices like the FTDI FT2232 with multiple channels may appear as   multiple entries\u2014one per serial port.</p> </li> <li> <p>On Windows, manufacturer and product strings of FTDI based devices may   show their FTDI generic values rather than the custom values such as 'Alhambra II' set by the device manufacturer.</p> </li> </ul> <p>Example output</p> <p></p>"},{"location":"cmd-apio-drivers/","title":"Apio drivers","text":""},{"location":"cmd-apio-drivers/#apio-drivers_1","title":"apio drivers","text":"<p>The <code>apio drivers</code> command group installs and uninstalls drivers needed by some FPGA boards.</p> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre> Subcommands <pre><code>apio drivers install ftdi\napio drivers uninstall ftdi\napio drivers install serial\napio drivers uninstall serial\n</code></pre>"},{"location":"cmd-apio-drivers/#apio-drivers-install-ftdi","title":"apio drivers install ftdi","text":"<p>The <code>apio drivers install ftdi</code> command installs the FTDI drivers required by some FPGA boards.</p> Examples <pre><code>apio drivers install ftdi\n</code></pre> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-drivers/#apio-drivers-uninstall-ftdi","title":"apio drivers uninstall ftdi","text":"<p>The <code>apio drivers uninstall ftdi</code> command removes previously installed FTDI drivers.</p> Examples <pre><code>apio drivers uninstall ftdi   # Uninstall FTDI drivers.\n</code></pre> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-drivers/#apio-drivers-install-serial","title":"apio drivers install serial","text":"<p>The <code>apio drivers install serial</code> command installs the serial drivers needed by certain FPGA boards.</p> Examples <pre><code>apio drivers install serial  # Install serial drivers.\n</code></pre> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-drivers/#apio-drivers-uninstall-serial","title":"apio drivers uninstall serial","text":"<p>The <code>apio drivers uninstall serial</code> command removes previously installed serial drivers.</p> Examples <pre><code>apio drivers uninstall serial    # Uninstall serial drivers.\n</code></pre> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-examples/","title":"Apio examples","text":""},{"location":"cmd-apio-examples/#apio-examples_1","title":"apio examples","text":"<p>The <code>apio examples</code> command group includes subcommands for listing and fetching example projects provided by Apio. Each example is a self-contained project that can be built and uploaded to its respective FPGA board.</p> Examples <pre><code>-h, --help  Show this message and exit.\n</code></pre> Subcommands <pre><code>apio examples list\napio examples fetch\n</code></pre>"},{"location":"cmd-apio-examples/#apio-examples-list","title":"apio examples list","text":"<p>The <code>apio examples list</code> command shows available Apio project examples.</p> Examples <pre><code>apio examples list                     # List all examples\napio examples list  -v                 # Verbose output\napio examples list | grep alhambra-ii  # Filter for alhambra-ii examples\napio examples list | grep -i blink     # Filter for blinking examples\n</code></pre> Options <pre><code>-v, --verbose  Show detailed output.\n-h, --help     Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-examples/#apio-examples-fetch","title":"apio examples fetch","text":"<p>The <code>apio examples fetch</code> command retrieves a single example or all examples for a specific board. The default destination directory is the current directory and it can be overriden using the <code>--dst</code> flag. If the destination directory already exists, it must be empty.</p> Examples <pre><code>apio examples fetch alhambra-ii/ledon    # Single example\napio examples fetch alhambra-ii          # All examples for the board\napio examples fetch alhambra-ii -d work  # Explicit destination\n</code></pre> Options <pre><code>-d, --dst path  Set a different destination directory.\n-h, --help      Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-format/","title":"Apio format","text":""},{"location":"cmd-apio-format/#apio-format_1","title":"apio format","text":"<p>The <code>apio format</code> command formats project source files to ensure consistent style without changing their behavior. You can format specific files or let it format all project files by default.</p> <p>File paths are always relative to the project directory, even when using <code>--project-dir</code>.</p> Examples <pre><code>apio format                    # Format all source files.\napio format -v                 # Format all files with verbose output.\napio format main.v main_tb.v   # Format the two files.\n</code></pre> Options <pre><code>-e, --env name          Use a named environment from apio.ini\n-p, --project-dir path  Specify the project root directory\n-v, --verbose           Show detailed output\n-h, --help              Show help message and exit\n</code></pre> Customization <p>The format command utilizes the format tool from the Verible project, which can be configured using the <code>format-verible-options</code> setting in <code>apio.ini</code>. For example:</p> <pre><code>format-verible-options =\n    --column_limit=80\n    --indentation_spaces=4\n</code></pre> <p>For a full list of Verible formatter flags, refer to the documentation page online or use the command <code>apio raw -- verible-verilog-format --helpful</code>.</p> Protecting code <p>Sections of source code can be protected from formatting using the Verible formatter directives:</p> <pre><code>// verilog_format: off\n... untouched code ...\n// verilog_format: on\n</code></pre>"},{"location":"cmd-apio-fpgas/","title":"Apio fpgas","text":""},{"location":"cmd-apio-fpgas/#apio-fpgas_1","title":"apio fpgas","text":"<p>The <code>apio fpgas</code> command lists FPGAs supported by Apio.</p> <p>You can define custom FPGAs by placing a <code>fpgas.jsonc</code> file in the project directory,  which overrides the default configuration, provided they are supported by the underlying tools.</p> Examples <pre><code>apio fpgas                 # List all FPGAs.\napio fpgas -v              # List with extra columns.\napio fpgas | grep gowin    # Filter FPGA results.\napio boards --docs         # Generate a report for Apio docs\n</code></pre> Options <pre><code>-v, --verbose           Show detailed output\n-p, --project-dir path  Specify the project root directory\n-h, --help              Show help message and exit\n</code></pre>"},{"location":"cmd-apio-graph/","title":"Apio graph","text":""},{"location":"cmd-apio-graph/#apio-graph_1","title":"apio graph","text":"<p>The <code>apio graph</code> command generates a graphical representation of the hardware design.</p> Examples <pre><code>apio graph               # Generate an SVG file\napio graph --svg         # Generate an SVG file\napio graph --pdf         # Generate a PDF file\napio graph --png         # Generate a PNG file\napio graph -t my_module  # Graph the 'my_module' module\n</code></pre> Options <pre><code>--svg                   Generate an SVG file (default)\n--png                   Generate a PNG file\n--pdf                   Generate a PDF file\n-e, --env name          Use a named environment from apio.ini\n-p, --project-dir path  Specify the project root directory\n-t, --top-module name   Set the top-level module to graph\n-v, --verbose           Show detailed output\n-h, --help              Show help message and exit\n</code></pre> Notes <ul> <li>On Windows, run <code>explorer _build/default/hardware.svg</code> to view the graph.   If your environment name is different from <code>default</code>, adjust the path accordingly.</li> <li>On macOS, use <code>open _build/default/hardware.svg</code>.</li> </ul> Example output <p></p>"},{"location":"cmd-apio-info/","title":"Apio info","text":""},{"location":"cmd-apio-info/#apio-info_1","title":"apio info","text":"<p>The <code>apio info</code> command group displays additional information about Apio and your system.</p> Options <p><code>-h, --help  Show this message and exit.</code></p> Subcommands <pre><code>  apio info platforms\n  apio info system\n  apio info colors\n  apio info themes\n</code></pre>"},{"location":"cmd-apio-info/#apio-info-platforms","title":"apio info platforms","text":"<p>The command <code>apio info platforms</code> lists the platform IDs supported by Apio and highlights your system's effective ID.</p> <p>[Advanced] The automatic platform ID detection of Apio can be overridden by defining a different platform ID using the <code>APIO_PLATFORM</code> environment variable, though this is generally not recommended.</p> Examples <pre><code>apio info platforms   # List supported platform IDs\n</code></pre> Options <pre><code>-h, --help  Show this message and exit\n</code></pre>"},{"location":"cmd-apio-info/#apio-info-system","title":"apio info system","text":"<p>The <code>apio info system</code> command displays general information about your system and Apio installation. Useful for diagnosing setup or environment issues.</p> <p>[Advanced] The default location of the Apio home directory\u2014where it saves preferences and packages\u2014is <code>.apio</code> under your home directory. This can be changed using the <code>APIO_HOME</code> environment variable.</p> Examples <pre><code>apio info system   # Show system information\n</code></pre> Options <pre><code>-h, --help  Show this message and exit\n</code></pre>"},{"location":"cmd-apio-info/#apio-info-colors","title":"apio info colors","text":"<p>The <code>apio info colors</code> command shows how ANSI colors are rendered on your system, which helps diagnose color-related issues.  </p> <p>The command shows colors even if the current theme is <code>no-colors</code>.</p> Examples <pre><code>apio info colors          # Rich library output (default)\napio sys col -p           # Using shortcut\n</code></pre> Options <pre><code>-h, --help   Show this message and exit\n</code></pre>"},{"location":"cmd-apio-info/#apio-info-themes","title":"apio info themes","text":"<p>The command <code>apio info themes</code> shows the colors of the Apio themes. It can be used to select the theme that works the best for you. Type <code>apio preferences -h</code> for information on our to select a theme.</p> <p>The command shows the themes colors even if the current theme is <code>no-colors</code>.</p> Examples <pre><code>apio info themes          # Show themes colors\napio inf col -p           # Using shortcuts.\n</code></pre> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre> Example output <p></p>"},{"location":"cmd-apio-lint/","title":"Apio lint","text":""},{"location":"cmd-apio-lint/#apio-lint_1","title":"apio lint","text":"<p>The <code>apio lint</code> command checks the project's source files for errors, inconsistencies, and style violations using the <code>Verilator</code> tool included with Apio.</p> Examples <pre><code>apio lint                # Lint the entire design\napio lint -t my_module   # Lint only 'my_module' and its dependencies\napio lint --all          # Enable all warnings, including style warnings\n</code></pre> Options <pre><code>--nostyle               Disable all style warnings\n--nowarn nowarn         Disable specific warning(s)\n--warn warn             Enable specific warning(s)\n-a, --all               Enable all warnings, including code style warnings\n-t, --top-module name   Restrict linting to this module and its dependencies\n-e, --env name          Use a named environment from apio.ini\n-p, --project-dir path  Specify the project root directory\n-h, --help              Show help message and exit\n</code></pre>"},{"location":"cmd-apio-packages/","title":"Apio packages","text":""},{"location":"cmd-apio-packages/#apio-packages_1","title":"apio packages","text":"<p>The command group <code>apio packages</code> provides commands to manage the installation of Apio packages. These are not Python packages, but collections of tools and data required by Apio.</p> <p>The list of available packages depends on your operating system and may vary across platforms.</p> Options <pre><code>-h, --help  Show this message and exit.\n</code></pre> Subcommands <pre><code>apio packages update\napio packages list\n</code></pre>"},{"location":"cmd-apio-packages/#apio-preferences-update","title":"apio preferences update","text":"<p>The <code>apio packages update</code> command updates installed packages to their latest versions.</p> Examples <pre><code>apio packages update            # Update packages\napio pack upd                   # Same, with shortcuts\napio packages update --force    # Force reinstallation from scratch\napio packages update --verbose  # Provide additional info\n</code></pre> Options <pre><code>-f, --force    Force reinstallation.\n-v, --verbose  Show detailed output.\n-h, --help     Show this message and exit.\n</code></pre> Notes <ul> <li> <p>Adding the <code>--force</code> option forces the reinstallation of existing   packages; otherwise, packages that are already installed correctly   remain unchanged.</p> </li> <li> <p>It is recommended to run the 'apio packages update' once in a   while because it checks the Apio remote server for updated packages with potential fixes and new examples.</p> </li> </ul>"},{"location":"cmd-apio-packages/#apio-preferences-list","title":"apio preferences list","text":"<p>The <code>apio packages list</code> command displays the available and installed Apio packages. The list may vary depending on your operating system.</p> Examples <pre><code>apio packages list\n</code></pre> Options <pre><code>-v, --verbose  Show detailed output.\n-h, --help     Show this message and exit.\n</code></pre>"},{"location":"cmd-apio-preferences/","title":"Apio preferences","text":""},{"location":"cmd-apio-preferences/#apio-preferences_1","title":"apio preferences","text":"<p>The <code>apio preferences</code> command lets you view and manage user preferences. These settings are stored in the <code>profile.json</code> file in the Apio home directory (e.g. <code>~/.apio</code>) and apply to all Apio projects.</p> <p>To review the available themes on your screen type <code>apio info themes</code>.</p> Examples <pre><code>apio preferences -t light       # Set theme for light backgrounds\napio preferences -t dark        # Set theme for dark backgrounds\napio preferences -t no-colors   # Disable color output\napio preferences --list         # Show current preferences\napio pref -t dark               # Using command shortcut\n</code></pre> Options <pre><code>-t, --theme [light|dark|no-colors]  Set color theme\n-c, --colors                        List available theme colors\n-l, --list                          Show current preferences\n-h, --help                          Show help message and exit\n</code></pre>"},{"location":"cmd-apio-raw/","title":"Apio raw","text":""},{"location":"cmd-apio-raw/#apio-raw_1","title":"apio raw","text":"<p>The <code>apio raw</code> command bypasses Apio's usual workflow to run tools directly. It is intended for advanced users familiar with those tools.</p> <p>Before execution, Apio temporarily modifies environment variables like <code>$PATH</code> to make its packages accessible. Use the option <code>--verbose</code> to view these changes.</p> Examples <pre><code>apio raw    -- yosys --version      # Show Yosys version\napio raw -v -- yosys --version      # Verbose output\napio raw    -- yosys                # Start Yosys in interactive mode\napio raw    -- icepll -i 12 -o 30   # Calculate ICE PLL parameters\napio raw    -- which yosys          # Locate yosys in the path\napio raw -v                         # Show Apio environment settings\napio raw -h                         # Show help message\n</code></pre> <p>Use the <code>--</code> marker to separate Apio's own options from those passed to the tool being run.</p> Options <pre><code>-v, --verbose  Show detailed output\n-h, --help     Show help message and exit\n</code></pre>"},{"location":"cmd-apio-report/","title":"Apio report","text":""},{"location":"cmd-apio-report/#apio-report_1","title":"apio report","text":"<p>The <code>apio report</code> command provides resource utilization and timing information for the design. It helps identify bottlenecks and verify whether the design meets its target clock speed.</p> Examples <pre><code>apio report            # Show report\napio report --verbose  # Show detailed report\n</code></pre> Options <pre><code>-e, --env name          Use a named environment from apio.ini\n-p, --project-dir path  Specify the project root directory\n-v, --verbose           Show detailed output\n-h, --help              Show help message and exit\n</code></pre> Example report <pre><code>FPGA Resource Utilization\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  RESOURCE      \u2502  USED  \u2502   TOTAL  \u2502  UTIL.  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  ICESTORM_LC   \u2502    90  \u2502    7680  \u2502     1%  \u2502\n\u2502  ICESTORM_PLL  \u2502        \u2502       2  \u2502         \u2502\n\u2502  ICESTORM_RAM  \u2502        \u2502      32  \u2502         \u2502\n\u2502  SB_GB         \u2502     2  \u2502       8  \u2502    25%  \u2502\n\u2502  SB_IO         \u2502     9  \u2502     256  \u2502     3%  \u2502\n\u2502  SB_WARMBOOT   \u2502        \u2502       1  \u2502         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nClock Information\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  CLOCK  \u2502  MAX SPEED [Mhz]  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  CLK    \u2502           119.15  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"cmd-apio-sim/","title":"Apio sim","text":""},{"location":"cmd-apio-sim/#apio-sim_1","title":"apio sim","text":"<p>The <code>apio sim</code> command runs a simulation for the default or specified testbench and displays the results in a GTKWave window. Testbench files should end with <code>_tb</code>, such as <code>main_tb.v</code> or <code>main_tb.sv</code>. You can set the default testbench using the <code>default-testbench</code> option in <code>apio.ini</code>. If this option is not set and there's only one testbench in the project, that file will be used.</p> <p>The <code>apio sim</code> command defines the macro <code>APIO_SIM=1</code>, which allows failed assertions to skip the <code>$fatal</code> call. This lets the simulation continue and display faulty signals in the GTKWave viewer.</p> <pre><code># Instead of this\n$fatal;\n\n# Use this\nif (!`APIO_SIM) $fatal;\n</code></pre> Examples <pre><code>apio sim                   # Simulate the default testbench\napio sim my_module_tb.v    # Simulate the specified testbench\napio sim my_module_tb.sv   # Simulate the specified testbench\n</code></pre> Options <pre><code>-f, --force             Force simulation\n-e, --env name          Use a named environment from apio.ini\n-n, --no-gtkwave        Skip GTKWave\n-p, --project-dir path  Specify the project root directory\n-h, --help              Show help message and exit\n</code></pre> Notes <ul> <li> <p>Avoid using the Verilog <code>$dumpfile()</code> function, as it can override the default name and location Apio assigns for the <code>.vcd</code> file.</p> </li> <li> <p>Testbench paths must always be relative to the project directory, even when using <code>--project-dir</code>.</p> </li> <li> <p>For a sample testbench that utilizes this macro, see the apio example <code>alhambra-ii/getting-started</code>.</p> </li> <li> <p>When configuring signals in GTKWave, save your setup so you don\u2019t have to repeat it each time.</p> </li> </ul> Example simulation results <p></p>"},{"location":"cmd-apio-test/","title":"Apio test","text":""},{"location":"cmd-apio-test/#apio-test_1","title":"apio test","text":"<p>The <code>apio test</code> command simulates one or more testbenches in the project. It is intended for automated testing of your design. Testbenches should have filenames ending in <code>_tb</code> (e.g., <code>my_module_tb.v</code>) and should use the <code>$fatal</code> directive to indicate errors.</p> Examples <pre><code>apio test                 # Run all *_tb.v testbenches\napio test my_module_tb.v  # Run a single testbench\n</code></pre> Options <pre><code>-e, --env name          Use a named environment from apio.ini\n-p, --project-dir path  Specify the project root directory\n-h, --help              Show help message and exit\n</code></pre> Notes <ul> <li> <p>Avoid using the Verilog <code>$dumpfile()</code> function, as it may override   the default name and location Apio assigns for the generated <code>.vcd</code> file.</p> </li> <li> <p>Testbench paths must be relative to the project directory,   even when using the <code>--project-dir</code> option.</p> </li> <li> <p>See the Apio example <code>alhambra-ii/getting-started</code> for a testbench   that demonstrates recommended practices.</p> </li> <li> <p>For graphical signal visualization, use the <code>apio sim</code> command instead.</p> </li> </ul>"},{"location":"cmd-apio-upgrade/","title":"Apio upgrade","text":""},{"location":"cmd-apio-upgrade/#apio-upgrade_1","title":"apio upgrade","text":"<p>The <code>apio upgrade</code> command checks the latest Apio release and provides upgrade instructions if needed.</p> Examples <pre><code>apio upgrade\n</code></pre> Options <pre><code>-h, --help  Show help message and exit\n</code></pre>"},{"location":"cmd-apio-upload/","title":"Apio upload","text":""},{"location":"cmd-apio-upload/#apio-upload_1","title":"apio upload","text":"<p>The <code>apio upload</code> command builds the bitstream (like <code>apio build</code>) and uploads it to the FPGA board.</p> Examples <pre><code>apio upload                            # Typical usage\napio upload -s /dev/cu.usbserial-1300  # Specify serial port\napio upload -n FTXYA34Z                # Specify USB serial number\n</code></pre> Options <pre><code>-s, --serial-port serial-port  Specify the serial port\n-n, --serial-num serial-num    Specify the device's USB serial number\n-e, --env name                 Use a named environment from apio.ini\n-p, --project-dir path         Specify the project root directory\n-h, --help                     Show this help message and exit\n</code></pre> Notes <ul> <li> <p>In most cases, <code>apio upload</code> is enough to locate and program the FPGA board. Use the <code>--serial-port</code> or <code>--serial-num</code> options to select a specific board if multiple matching devices are connected.</p> </li> <li> <p>Use <code>apio devices</code> to list connected USB and serial devices, and <code>apio drivers</code> to install or uninstall device drivers.</p> </li> <li> <p>You can override the board's default programmer using the <code>programmer-cmd</code> option in <code>apio.ini</code>.</p> </li> </ul>"},{"location":"command-line/","title":"Apio command line","text":"<p>This page explains the principles and general options of using the Apio command line. For specific commands, see the respective command description.</p>"},{"location":"command-line/#apio-command-tree","title":"Apio command tree","text":"<p>Apio commands are organized as a command tree rooted at <code>apio</code>. Some commands, such as <code>apio build</code>, have only two levels, while others, like <code>apio drivers install ftdi</code>, have three or more. To explore available commands at each level, use the <code>-h</code> option (short for <code>--help</code>) with any command.</p> <p>For example</p> <pre><code>  apio -h\n  apio info -h\n  apio info cli -h\n</code></pre>"},{"location":"command-line/#apio-command-options","title":"Apio command options","text":"<p>Most Apio commands have options that let you control their behavior. For example, the command 'apio build' has options to control the verbosity of its output:</p> <pre><code>apio build --verbose\napio build --verbose-synth\n</code></pre> <p>To list the options for a command, run it with the <code>-h</code> option. For example:</p> <pre><code>apio build -h\n</code></pre>"},{"location":"command-line/#apio-command-shortcuts","title":"Apio command shortcuts","text":"<p>When typing apio commands, it's sufficient to type enough of each command to make the selection unambiguous. For example, these commands below are equivalent.</p> <pre><code>apio preferences\napio pref\napio pr\n</code></pre> <p>However, <code>apio p</code> is ambiguous because it matches both <code>apio preferences</code> and <code>apio packages</code>.</p>"},{"location":"command-line/#apio-shell-auto-completion","title":"Apio shell auto completion","text":"<p>Apio's command line processor is based on the Python Click package which supports auto completion with some shells. Although it worked as a proof of concept, this feature is experimental and not guaranteed to function reliably. More information is available in the Click documentation: https://tinyurl.com/click-shell-completion</p>"},{"location":"contributing-examples/","title":"Contributing Apio examples","text":"<p>Apio examples are stored in the <code>examples</code> directory of the FPGAwars/apio-examples repository and are distributed in the Apio <code>examples</code> package (type <code>apio examples list</code> to check its version).</p> <p>To contribute a new example, submit a pull request to the FPGAwars/apio-examples repository after confirming it meets the following requirements:</p> <ul> <li>The example includes an <code>info</code> file with a single-line description (max 50 characters).</li> <li>The example passes linting with no warnings and can be built and uploaded.</li> <li>The example path is <code>examples/&lt;board-id&gt;/&lt;example-name&gt;</code>, where <code>&lt;board-id&gt;</code> matches the value in <code>apio.ini</code> and <code>&lt;example-name&gt;</code> includes only lowercase letters (a\u2013z), digits (0\u20139), and dashes (-), and begins with a letter.</li> <li>The example includes at least one testbench that passes <code>apio test</code> and <code>apio sim</code> without errors.</li> <li>Each testbench has a corresponding <code>.gtkw</code> file with a saved GTKWave state.</li> </ul>"},{"location":"contributing-examples/#notes","title":"NOTES","text":"<ul> <li>Files may be placed in a single directory or organized into subdirectories.</li> <li>Verilog <code>.v</code> and SystemVerilog <code>.sv</code> files may be used in any combination.</li> <li>If <code>apio.ini</code> defines multiple environments, the rules above apply to each environment selected with the <code>--env</code> flag.</li> </ul>"},{"location":"creating-apio-version/","title":"Creating an Apio version","text":"<p>Page under construction</p> <p>The details of the release process is not finalized yet.</p>"},{"location":"creating-apio-version/#cutting-a-release-candidate","title":"Cutting a release candidate","text":"<p>TBD</p>"},{"location":"creating-apio-version/#testing-a-release-candidate","title":"Testing a release candidate","text":"<p>TBD</p>"},{"location":"creating-apio-version/#releasing-a-release-candidate-as-an-official-release","title":"Releasing a release candidate as an official release","text":"<p>TBD</p> <p></p> <p>Things to pay attention to:</p> <ul> <li>Determine the increment level, patch, minor, or major.</li> <li>Setting the new apio version in <code>apio/__init__</code>.</li> <li>Creating a <code>.jsonc</code> remote config file at https://github.com/FPGAwars/apio/tree/develop/remote-config with the desired package versions.</li> <li>Waiting for the next daily apio build and make sure the build is green (use its apio commit as the cutoff commit)</li> <li>Making sure that the apio test workflows are green for the cutoff commit.</li> <li>Creating a new release in the apio repo and adding to it the build files from the build repo.</li> <li>Somewhere along these steps, test the release candidate.</li> </ul> <p></p>"},{"location":"creating-package-version/","title":"Creating a Package version","text":"<p>Page under construction</p> <p>The details of the release process is not finalized yet.</p>"},{"location":"custom-boards/","title":"Using Custom Boards","text":"<p>Apio uses definitions of FPGA devices, FPGA programmers, and FPGA boards to simplify the setup of new projects. The diagram below illustrates the relationship between these definitions and Apio's operation, as well as the names of their respective definition files located in the Apio resources directory.</p> <p></p> <p></p> <p></p> <p>If any of these default definitions do not match the FPGA board you are using, you can override them by placing custom definition files in the top-level directory of your project. These replacement files should:</p> <ul> <li>Use the same file names and formats as the originals (<code>fpgas.jsonc</code>,   <code>programmers.jsonc</code>, or <code>boards.jsonc</code>).</li> <li>Include only the specific FPGA, programmer, or board definitions you need.</li> </ul>"},{"location":"custom-boards/#resource-files","title":"Resource Files","text":"Resource File Contains Keyed By <code>fpgas.jsonc</code> FPGA definitions <code>fpga-id</code> <code>programmers.jsonc</code> Programmer definitions <code>programmer-id</code> <code>boards.jsonc</code> Board definitions <code>board-id</code> <p>If you believe your custom definition may be useful to others, consider submitting a pull request to the appropriate Apio resource file.</p>"},{"location":"custom-boards/#example-custom-boardsjsonc","title":"Example: Custom <code>boards.jsonc</code>","text":"<p>The following is an example of a custom <code>boards.jsonc</code> file that defines a variant of the <code>upduino31</code> board:</p> <pre><code>{\n  \"upduino31c\": {\n    \"name\": \"UPduino v3.1c\",\n    \"fpga-id\": \"ice40up5k-sg48\",\n    \"programmer\": {\n      \"id\": \"iceprog\"\n    },\n    \"usb\": {\n      \"vid\": \"0403\",\n      \"pid\": \"6010\",\n      \"product-regex\": \"UPduino v3\\\\.1c\"\n    }\n  }\n}\n</code></pre>"},{"location":"development-environment/","title":"Apio Developer Environment","text":""},{"location":"development-environment/#fork-the-apio-repository","title":"Fork the Apio repository","text":"<p>The first step in developing for Apio is to fork the Apio repository. This will allow you to run the GitHub test workflow before submitting your pull request. In the rest of this document, we assume that you have forked the Apio repository and cloned it locally on your computer.</p>"},{"location":"development-environment/#install-the-invoke-tool","title":"Install the 'Invoke' tool","text":"<p>Apio development tasks are defined in the file <code>tasks.py</code> which is executed by the <code>invoke</code> command. To install the <code>invoke</code> command run</p> <pre><code>pip install invoke\n</code></pre> <p>Test it by listing the available tasks</p> <pre><code>invoke --list\n</code></pre>"},{"location":"development-environment/#install-your-cloned-apio","title":"Install your cloned Apio","text":"<p>The easiest way to develop Apio is to install its source code from your local repo as the Pip <code>apio</code> package. This will allow you to test your edited code by running <code>apio</code> from the command line.</p> <p>To install the Apio source code as the Pip <code>apio</code> package, run these command in the root directory of the Apio repository:</p> <pre><code>invoke install-apio\n</code></pre> <p>From this point on, when you run <code>apio</code>, it will run the source code in your cloned repo, including any changes you may have.</p>"},{"location":"development-environment/#test-your-changes-locally","title":"Test your changes locally","text":"<p>Before creating a commit, test your code locally by running this in the repo root directory:</p> <pre><code>invoke check\n</code></pre> <p>During debugging, it is sometimes useful to run quick partial tests before running <code>invoke check</code>. Here are some examples:</p> <pre><code># Run linters only\ninvoke lint\n\n# Run offline tests only. These are tests that don't fetch remote Apio packages.\ninvoke test\n\n# Run a single test file with verbose info\npytest -vv -s test/managers/test_project.py\n\n# Run a single test with verbose info\npytest -vv -s test/managers/test_project.py::test_first_env_is_default\n</code></pre>"},{"location":"development-environment/#generate-a-test-coverage-report","title":"Generate a test coverage report.","text":"<p>You can generate a report with the line by line coverage of the tests by running</p> <pre><code>invoke coverage-report\n</code></pre> <p>This will update the page <code>_pytest-coverage/index.html</code> with the latest coverage information.</p> <p>The directory <code>_pytest-coverage</code> is ignored by git and is not checked in with apio.</p>"},{"location":"development-environment/#confirm-that-the-test-workflow-passes","title":"Confirm that the test workflow passes","text":"<p>Once you are ready to send a pull request from your forked repository, make sure that the test workflow completed successfully. You can find it in the Actions tab of your forked repo.</p> <p>The test workflow tests the <code>develop</code> branch, so if you worked on your own branch, merge it with <code>develop</code> first.</p>"},{"location":"development-environment/#using-apio_debug-to-print-verbose-debug-information","title":"Using <code>APIO_DEBUG</code> to print verbose debug information","text":"<p>Debug information can be printed by defining the env var <code>APIO_DEBUG</code> with an int value in the range 1 (minimal debug info) to 10 (verbose debug info).</p> <pre><code># Linux and Mac OSX\nexport APIO_DEBUG=1   # Minimal debug info\nexport APIO_DEBUG=3   # More debug info\n\n# Windows\nset APIO_DEBUG=1\nset APIO_DEBUG=3\n</code></pre>"},{"location":"development-environment/#debugging-with-visual-studio-code","title":"Debugging with Visual Studio Code","text":"<p>The file <code>.vscode/launch.json</code> contains debugging targets for the Visual Studio Code (VSC) debugger. To use them, make sure that you open the Apio project at its root directory and select the desired VSC debugging target. To customize the targets for your specific needs, click on the Settings icon (wheel) near the debugging target and edit its definition in <code>launch.json</code> (do not submit changes to <code>launch.json</code> unless they will benefit other developers).</p> <p>Since Apio launches Scons as a subprocess, debugging the Scons code requires a different approach using these steps:</p> <ol> <li>Set the environment variable <code>APIO_SCONS_DEBUGGER</code> to cause Scons to wait for the debugger (in <code>apio/scons/SConstruct</code>).</li> <li>Set your desired breakpoints in the Scons part of Apio.</li> <li>From the command line, run the Apio command that invokes the Scons subprocess (e.g., <code>apio build</code>).</li> <li>In the VSC debugger, start the target <code>Attach remote debugger</code>.</li> </ol>"},{"location":"development-environment/#override-apio-remote-config-for-testing","title":"Override Apio remote config for testing","text":"<p>Apio retrieves its package information from a remote config <code>.jsonc</code> file whose URL is stored in <code>api/resources/config.jsonc</code>. For testing, it may be useful to override it and point to an alternative config file. This can be done by defining the <code>APIO_REMOTE_CONFIG_URL</code> variable.</p> <p>Examples:</p> <pre><code>export APIO_REMOTE_CONFIG_URL=\"https://github.com/FPGAwars/apio/raw/develop/remote-config/apio-{V}.jsonc\"\n\nexport APIO_REMOTE_CONFIG_URL=\"file:///projects/apio-dev/repo/remote-config/apio-{V}.jsonc\"\n\nexport APIO_REMOTE_CONFIG_URL=\"file:///tmp/my-config-file.jsonc\"\n</code></pre>"},{"location":"help/","title":"Getting help","text":""},{"location":"help/#apio-project-home","title":"Apio Project Home","text":"<p>The Apio project is hosted on a public GitHub repository at https://github.com/FPGAwars/apio.</p>"},{"location":"help/#asking-questions","title":"Asking Questions","text":"<p>You can ask the Apio team and other users in the Apio discussion forum at https://github.com/FPGAwars/apio/discussions.</p>"},{"location":"help/#bug-reports","title":"Bug Reports","text":"<p>Bug reports should be submitted in the main Apio repository at https://github.com/FPGAwars/apio/issues, even if they are related to other Apio repositories such as the package repositories.</p>"},{"location":"installing-apio/","title":"Installing Apio","text":"<p>Apio can be installed in a few ways:</p> Method Description Platforms Pip package Installed using Python <code>pip</code> command. Requires Python. macOS, Linux, Windows Installer A standalone installation using an installer wizard. macOS, Windows Debian package A standalone installation using the <code>apt</code> package manager. Linux File bundle A standalone file archive with executables and support files. macOS, Linux, Windows <p>To install Apio, select your platform and preferred installation method from the Table of Contents in the sidebar. If the sidebar is not visible, scroll down to find the installation guide for your platform.</p>"},{"location":"installing-apio/#macos-apple-silicon","title":"macOS Apple Silicon","text":""},{"location":"installing-apio/#install-using-a-pip-package","title":"Install using a Pip package","text":"<p>To install Apio on macOS Apple Silicon using a Pip package, follow these steps:</p> <ol> <li> <p>Verify that you have Python installed by running:</p> <pre><code>python --version\n</code></pre> </li> <li> <p>Install Apio using pip:</p> <pre><code>pip install --force-reinstall apio\n</code></pre> </li> <li> <p>In a new shell window, run the following command to test your installation:</p> <pre><code>apio\n</code></pre> </li> </ol> <p>If necessary, add the directory of the installed <code>apio</code> binary to your <code>$PATH</code>.</p>"},{"location":"installing-apio/#install-using-an-installer","title":"Install using an installer","text":"<p>To install Apio on macOS Apple Silicon using an installer, follow these steps:</p> <ol> <li> <p>From the latest release download the installer file:</p> <pre><code>apio-darwin-arm64-[version]-[date]-installer.pkg\n</code></pre> </li> <li> <p>Run the following command to allow the unsigned Apio installer to run:</p> <pre><code>xattr -d com.apple.quarantine apio-darwin-arm64-*-installer.pkg 2&gt;&amp;1 | grep -v \"No such xattr\"\n</code></pre> </li> <li> <p>Double-click on the installer file and follow the instructions.</p> </li> <li> <p>In a new shell window, run the following command to test your installation:</p> <pre><code>apio\n</code></pre> </li> </ol> <p>NOTE: The installer creates the file <code>/etc/paths.d/Apio</code> to export automatically the path of the installed app.</p>"},{"location":"installing-apio/#install-using-a-file-bundle","title":"Install using a file bundle","text":"<p>To install Apio on macOS Apple Silicon using a file bundle, follow these steps:</p> <ol> <li> <p>From the latest release download the file bundle:</p> <pre><code>apio-darwin-arm64-[version]-[date]-bundle.tgz\n</code></pre> </li> <li> <p>Run the following command to allow the unsigned Apio app to run.</p> <pre><code>xattr -d com.apple.quarantine apio-darwin-arm64-*-bundle.tgz 2&gt;&amp;1 | grep -v \"No such xattr\"\n</code></pre> </li> <li> <p>After you run the xattr command, double click on the bundle file to uncompress it and reveal the <code>apio</code> directory with the application files.</p> </li> <li> <p>While in the <code>apio</code> directory, run the following command to test your installation:</p> <pre><code>./apio\n</code></pre> </li> <li> <p>Move the <code>apio</code> directory to a location of your choosing and add it to your <code>$PATH</code>.</p> </li> </ol>"},{"location":"installing-apio/#macos-intel-silicon","title":"macOS Intel Silicon","text":""},{"location":"installing-apio/#install-using-a-pip-package_1","title":"Install using a Pip package","text":"<p>To install Apio on macOS Intel Silicon using a Pip package, follow these steps:</p> <ol> <li> <p>Verify that you have Python installed by running:</p> <pre><code>python --version\n</code></pre> </li> <li> <p>Install Apio using pip:</p> <pre><code>pip install --force-reinstall apio\n</code></pre> </li> <li> <p>In a new shell window, run the following command to test your installation:</p> <pre><code>apio\n</code></pre> </li> </ol> <p>If necessary, add the directory of the installed <code>apio</code> binary to your <code>$PATH</code>.</p>"},{"location":"installing-apio/#linux-x86-64","title":"Linux X86-64","text":"<p>To install Apio on Linux X86-64 using a Pip package, follow these steps:</p>"},{"location":"installing-apio/#install-using-a-pip-package_2","title":"Install using a Pip package","text":"<ol> <li> <p>Verify that you have Python installed by running:</p> <pre><code>python --version\n</code></pre> </li> <li> <p>Install Apio using pip:</p> <pre><code>pip install --force-reinstall apio\n</code></pre> </li> <li> <p>In a new shell window, run the following command to test your installation:</p> <pre><code>apio\n</code></pre> </li> </ol> <p>If necessary, add the directory of the installed <code>apio</code> binary to your <code>$PATH</code>.</p>"},{"location":"installing-apio/#install-a-debian-package","title":"Install a Debian package","text":"<p>To install Apio on Linux X86-64 using a Debian package, follow these steps:</p> <ol> <li> <p>From the latest release download the Debian package file:</p> <pre><code>apio-linux-x86-64-[version]-[date]-debian.deb\n</code></pre> </li> <li> <p>In the directory where you downloaded the package, install it using:</p> <pre><code>sudo dpkg -i ./apio-linux-x86-64-[version]-[date]-debian.deb\n</code></pre> </li> <li> <p>In a new shell window, run the following command to test your installation:</p> <pre><code>apio\n</code></pre> </li> </ol>"},{"location":"installing-apio/#install-using-a-file-bundle_1","title":"Install using a file bundle","text":"<p>To install Apio on Linux X86-64 using a file bundle, follow these steps:</p> <ol> <li> <p>From the latest release download the file bundle:</p> <pre><code>apio-linux-x86-64-[version]-[date]-bundle.tgz\n</code></pre> </li> <li> <p>Uncompress the bundle file to reveal the <code>apio</code> directory with the application files.</p> <pre><code>tar -xzf apio-linux-x86-64-*-bundle.tgz\n</code></pre> </li> <li> <p>While in the <code>apio</code> directory, run the following command to test your installation:</p> <pre><code>./apio\n</code></pre> </li> <li> <p>Move the <code>apio</code> directory to a location of your choosing and add it to your <code>$PATH</code>.</p> </li> </ol>"},{"location":"installing-apio/#linux-arm-64","title":"Linux ARM-64","text":"<p>To install Apio on Linux ARM-64 using a Pip package, follow these steps:</p>"},{"location":"installing-apio/#install-using-a-pip-package_3","title":"Install using a Pip package","text":"<ol> <li> <p>Verify that you have Python installed by running:</p> <pre><code>python --version\n</code></pre> </li> <li> <p>Install Apio using pip:</p> <pre><code>pip install --force-reinstall apio\n</code></pre> </li> <li> <p>In a new shell window, run the following command to test your installation:</p> <pre><code>apio\n</code></pre> </li> </ol> <p>If necessary, add the directory of the installed <code>apio</code> binary to your <code>$PATH</code>.</p>"},{"location":"installing-apio/#windows-x86-64","title":"Windows X86-64","text":"<p>To install Apio on Windows X86-64 using a Pip package, follow these steps:</p>"},{"location":"installing-apio/#install-using-a-pip-package_4","title":"Install using a Pip package","text":"<ol> <li> <p>Verify that you have Python installed by running:</p> <pre><code>python --version\n</code></pre> </li> <li> <p>Install Apio using pip:</p> <pre><code>pip install --force-reinstall apio\n</code></pre> </li> <li> <p>In a new command window, run the following command to test your installation:</p> <pre><code>apio\n</code></pre> </li> </ol> <p>If necessary, add the directory of the installed <code>apio</code> binary to your <code>$PATH</code>.</p>"},{"location":"installing-apio/#install-using-an-installer_1","title":"Install using an installer","text":"<p>To install Apio on Windows X86-64 using an installer, follow these steps:</p> <ol> <li> <p>From the latest release download the installer file:</p> <pre><code>apio-windows-amd64-[version]-[date]-installer.exe\n</code></pre> </li> <li> <p>Right click on the installer file, select <code>properties</code>, check the <code>Unblock</code> checkbox and press OK. This will     allow you to run the unsigned installer.</p> </li> <li> <p>After enabling the installer for execution in the previous step, double click on it and follow the installer wizard.</p> </li> <li> <p>In a new command window, run the following command to test your installation:</p> <pre><code>apio\n</code></pre> </li> </ol>"},{"location":"installing-apio/#install-using-a-file-bundle_2","title":"Install using a file bundle","text":"<p>To install Apio on Windows X86-64 using a file bundle, follow these steps:</p> <ol> <li> <p>From the latest release download the file bundle:</p> <pre><code>apio-windows-amd64-[version]-[date]-bundle.zip\n</code></pre> </li> <li> <p>Right click on the bundle file , select <code>properties</code>, check the <code>Unblock</code> checkbox and press OK. This will     allow you to run the the unsigned Apio app.</p> </li> <li> <p>Uncompress the bundle to reveal the <code>apio</code> directory with the application files.</p> </li> <li> <p>While in the <code>apio</code> directory, run the following command to test your installation (this will run <code>apio.exe</code>):</p> <pre><code>.\\apio\n</code></pre> </li> <li> <p>Move the <code>apio</code> directory to a location of your choosing and add it to your <code>%PATH%</code>.</p> </li> </ol>"},{"location":"migrating-from-apio-0xx/","title":"Migrating from Apio 0.x.x","text":"<p>Apio 1.x.x introduces many improvements compared to Apio 0.x.x. Many of the changes were done in a backward compatible way, but some do require user attention. On this page, we outline the main changes from a compatibility point of view to help users migrate their projects successfully to Apio 1.x.x.</p>"},{"location":"migrating-from-apio-0xx/#uninstall-apio-0xx","title":"Uninstall Apio 0.x.x","text":"<p>It is recommended to first delete Apio 0.x.x before installing Apio 1.x.x. The steps to do so are:</p> <ol> <li> <p>Delete the Apio Python package <code>pip uninstall apio</code></p> </li> <li> <p>Delete the directory <code>.apio</code> under the user home directory. That directory contains packages and other transient files used by Apio.</p> </li> </ol>"},{"location":"migrating-from-apio-0xx/#create-project-file-apioini","title":"Create project file <code>apio.ini</code>","text":"<p>Apio 1.x.x requires a project file called <code>apio.ini</code> in the directory of each Apio project. Make sure your project has a text file called <code>apio.ini</code> with the content below, replace  with the id of your board (e.g. <code>alhambra-ii</code>) and replace  with the name of the top Verilog module of your project (e.g. <code>Blinky</code>). <pre><code>[env:default]\nboard = &lt;board&gt;\nmain-module = &lt;my-module&gt;\n</code></pre>"},{"location":"migrating-from-apio-0xx/#delete-calls-to-the-verilog-function-dumpfile","title":"Delete calls to the verilog function <code>$dumpfile()</code>.","text":"<p>Remove from your testbenches all calls to the Verilog function <code>$dumpfile()</code>. The location of the generated simulation files is now automatically controlled by Apio.</p>"},{"location":"migrating-from-apio-0xx/#know-the-new-commands","title":"Know the new commands","text":"<p>The hierarchy and names of some Apio commands were changed in Apio 1.x.x, and the table below will help you migrate from the old to the new commands. You can also use the <code>-h</code> option for detailed information on any command level, for example <code>apio -h</code>, <code>apio devices -h</code>, and <code>apio devices usb -h</code>.</p> Apio 0.x.x Apio 1.x.x Comments <code>apio boards --fpga</code> <code>apio fpgas</code> List supported FPGAs <code>apio boards --list</code> <code>apio boards</code> List supported boards <code>apio drivers --ftdi-enable</code> <code>apio drivers install ftdi</code> Install FTDI driver <code>apio examples --files</code> <code>apio examples fetch</code> Fetch an example <code>apio examples --list</code> <code>apio examples list</code> List examples <code>apio init</code> <code>apio create</code> Create an apio.ini file <code>apio install --all</code> <code>apio packages update</code> Install Apio packages <code>apio install --list</code> <code>apio packages list</code> List installed apio packages <code>apio system --lsftdi</code> <code>apio devices usb</code> List FTDI and USB devices <code>apio system --lsserial</code> <code>apio devices serial</code> List serial ports <code>apio time</code> <code>apio report</code> Report design timing. <code>apio verify</code> <code>apio lint</code> Verify the source code."},{"location":"project-file/","title":"The apio.ini project file","text":"<p>Every Apio project is required to have in its root directory a text file named <code>apio.ini</code> that contains the project configuration. At minimum, the file looks like the example below with a single <code>env</code> section and the require configuration options.</p> <pre><code>[env:default]\nboard = alhambra-ii   ; Board id\ntop-module = Main     ; Top Verilog module name\n</code></pre> <p>Below is a more complex <code>apio.ini</code> file that contains two <code>[env:name]</code> sections named <code>env1</code> and <code>env2</code>, a <code>[common]</code> section with settings that are shared by all envs, and an <code>[apio]</code> section the selects the <code>env2</code> as the default env.</p> <pre><code>; Optional [apio] section.\n[apio]\ndefault-env = env2\n\n; Optional [common] section.\n[common]\nboard = alhambra-ii\ntop-module = Main\n\n; Required first env section.\n[env:env1]\ndefault-testbench = main_tb.v\n\n; Optional additional env section(s).\n[env:env2]\ndefault-testbench = io_module_tb.v\n</code></pre> <p>At runtime, apio select the env to use based using the following rules in decreasing priorities:</p> <ol> <li>The value of the flag <code>--env</code>, if specified.</li> <li>The value of the <code>default-env</code> option in the <code>[apio]</code> section, if exists.</li> <li>The first env that is listed in <code>apio.ini</code>.</li> </ol> <p>When apio determines the env to use, it collects its options from the <code>[common]</code> and the [env:name] section, with options in the <code>[env:name]</code> section having higher priority, and executes the command with the resolved set options.</p>"},{"location":"project-file/#the-apio-section","title":"The [apio] section","text":"<p>The <code>[apio]</code> section is optional and currently supports the following options</p>"},{"location":"project-file/#default-env","title":"default-env","text":"<p>This is an optional option that species the name of the default env. Without this option, the default option is the first one that is listed in <code>apio.ini</code>.</p> <pre><code>[apio]\ndefault-env = env2\n</code></pre>"},{"location":"project-file/#the-common-section","title":"The [common] section","text":"<p>The <code>[common]</code> section is optional and supports any option that is also supported by the <code>[env:name]</code> sections. Any option defined in the <code>[common]</code> section will be shared by all <code>[env:name]</code> sections that do not explicitly define that option.</p>"},{"location":"project-file/#the-envname-sections","title":"The [env:name] sections","text":"<p>The <code>[env:name]</code> section defines a name build environment and every Apio project should include at least one <code>[env:name]</code> section. For projects with a single env, it's common to call it <code>[env:default]</code>. Following is the list of options that can appear in an <code>[env:name]</code> section and/or in the <code>[common]</code> section.</p>"},{"location":"project-file/#board-required","title":"board (required)","text":"<p>The required <code>board</code> option specifies the ID of the board that is used in with this env. The board ID must be one of the board IDs that are listed by the command <code>apio boards</code> (e.g. <code>alhambra-ii</code>).</p> <pre><code>[env:default]\nboard = alhambra-ii\n</code></pre> <p>Apio uses the board ID to determine information such as the FPGA part number and the programmer command to use to upload the design to the board.</p> <p>If your project contains a <code>boards.jsonc</code> file with custom board defintion, the board ID must be from that file.</p>"},{"location":"project-file/#default-testbench","title":"default-testbench","text":"<p>The optional <code>default-testbench</code> string option is useful with Apio projects that contain more than one testbench and it allows to specify the testbench that <code>apio sim</code> should simulate by default if a no testbench is specified. The value of the option is the relative path to the testbench file from the project root dir.</p> <pre><code>[env:default]\ndefault-testbench = tests/main_tb.v\n</code></pre>"},{"location":"project-file/#defines","title":"defines","text":"<p>The optional <code>defines</code> string list option allows to specify Verilog macros that are passed to verilog parsers such as Yosys and Iverilog.</p> <p>Each macro is specified in a separate lines and the marcors are passed to the Verilog parsers as <code>-D</code> command lines options. For example the marocs below are passed as <code>-DDEBUG_MODE -D45</code>.</p> <pre><code>[env:default]\ndefines =\n    DEBUG_MODE\n    SPEED=45\n</code></pre> <p>In the following example, the <code>defines</code> option is use to select the blinking rate in a project with two envs.</p> <pre><code>; Env for build with fast blink.\n[env:fast]\ndefines =\n    CLK_DIV=3_000_000\n\n; Env for build with slow blink.\n[env:slow]\ndefines =\n    CLK_DIV=12_000_000\n</code></pre>"},{"location":"project-file/#format-verible-options","title":"format-verible-options","text":"<p>The optional <code>format-verible-options</code> string list option allows to control the operation of the <code>apio format</code> command by specifying additional options to the underlying Verible formatter.</p> <pre><code>[env:default]\nformat-verible-options =\n    --column_limit=80\n    --indentation_spaces=4\n</code></pre> <p>For the list of the Verible formatter options, run the command <code>apio  raw -- verible-verilog-format --helpfull</code></p>"},{"location":"project-file/#programmer-cmd","title":"programmer-cmd","text":"<p>he optional <code>programmer-cmd</code> string option allows to override the programmer command used by the <code>apio upload</code> command. It is intended for special cases and should be avoided if possible.</p> <pre><code>[env:default]\nprogrammer-cmd = iceprog -d i:0x${VID}:0x${PID} ${BIN_FILE}\n</code></pre> <p>The list of supported placeholders is available in the Apio standard boards definitions files boards.jsonc. </p> <p>The placeholder <code>${BIN_FILE}</code> is not appended automatically to the programmer-cmd option and need to be added explicitly if needed.</p>"},{"location":"project-file/#top-module-required","title":"top-module (required)","text":"<p>The optional <code>top-module</code> string option specifies the name of the top module of the design.</p> <pre><code>[env:default]\ntop-module = Blinky\n</code></pre>"},{"location":"project-file/#yosys-synth-extra-options","title":"yosys-synth-extra-options","text":"<p>The optional <code>yosys-synth-extra-options</code> string list option allows adding options to the Yosys synth command used by the <code>apio build</code> command. In the example below, it adds the option <code>-dsp</code>, which enables on some FPGAs the use of <code>DSP</code> cells to implement multiply operations. This is an advanced option that is typically not needed.</p> <pre><code>[env:default]\nyosys-synth-extra-options =\n    -dsp\n    -verbose\n</code></pre>"},{"location":"project-structure/","title":"Apio Project Structure","text":""},{"location":"project-structure/#directory-structure","title":"Directory structure","text":"<p>An Apio project consists of a directory that contains the required project file <code>apio.ini</code> and the project files. Below is an example of a minimal ICE40 project (<code>alhambra-ii/blinky</code> example) which contains the project file <code>apio.ini</code>, a Verilog source file <code>blinky.v</code>, and the pinout constraints file <code>pinout.pcf</code>, which maps symbolic pin names to pin numbers.</p> <pre><code>my-project/\n\u251c\u2500\u2500 apio.ini\n\u251c\u2500\u2500 blinky.v\n\u2514\u2500\u2500 pinout.pcf\n</code></pre> <p>The next example (alhambra-ii/bcd-output) is more complex, with Verilog <code>*.v</code> source files, their <code>_tb.*</code> testbenches, and their <code>*.gtkw</code> GTKWave state files organized in a directory tree.</p> <pre><code>my-project/\n\u251c\u2500\u2500 apio.ini\n\u251c\u2500\u2500 bcd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bcd_digit_tb.gtkw\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 bcd_digit_tb.v\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 bcd_digit.v\n\u251c\u2500\u2500 main_tb.gtkw\n\u251c\u2500\u2500 main_tb.v\n\u251c\u2500\u2500 main.v\n\u251c\u2500\u2500 pinout.pcf\n\u251c\u2500\u2500 testing\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 apio_testing.vh\n\u2514\u2500\u2500 util\n    \u251c\u2500\u2500 reset_gen.v\n    \u251c\u2500\u2500 ticker_tb.gtkw\n    \u251c\u2500\u2500 ticker_tb.v\n    \u2514\u2500\u2500 ticker.v\n</code></pre> <p>Directory structure rules</p> <ul> <li>The project file <code>apio.ini</code> and the pinout constraints file should reside in the top-level directory.</li> <li>Source files and testbenches can reside in the root directory or in any subdirectory.</li> <li>Testbenches' GTKWave state files (<code>.gtkw</code>) should reside in the same directory as their respective testbenches.</li> </ul>"},{"location":"project-structure/#output-files","title":"Output files","text":"<p>Apio commands write their output to the directory <code>_build/&lt;env&gt;</code> under the project root directory, where <code>&lt;env&gt;</code> is the active environment name from <code>apio.ini</code>. For example, when building for an environment called <code>default</code>, the output directory is <code>_build/default</code>. The example below shows the results of the <code>apio build</code> command, including the ICE40 bitstream file <code>hardware.bin</code> and intermediate files created during the build.</p> <pre><code>my-project/\n\u251c\u2500\u2500 _build\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 default\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 hardware.asc\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 hardware.bin\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 hardware.json\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 hardware.pnr\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 scons.params\n\u251c\u2500\u2500 apio.ini\n\u251c\u2500\u2500 blinky.v\n\u2514\u2500\u2500 pinout.pcf\n</code></pre> <p>The command <code>apio clean</code> can be used to delete all Apio-generated files and force a build from scratch.</p>"},{"location":"project-structure/#using-git","title":"Using Git","text":"<p>When working with Git, we recommend including the following in your <code>.gitignore</code> file to avoid committing build artifacts and system files:</p> <p>.gitignore</p> <pre><code>_build\n.DS_Store\n</code></pre>"},{"location":"quick-start/","title":"Apio quick start","text":"<p>In this page, we will go through the steps of creating, validating, and uploading a design to an FPGA board. We will use the Alhambra-ii FPGA board, but the process is the same for all supported boards.</p>"},{"location":"quick-start/#step-1-installing-apio","title":"Step 1: Installing Apio","text":"<p>The first step in using Apio is installing it, visit the Installing Apio page, choose your installation method, follow the installation instructions and continue in step 2 below.</p>"},{"location":"quick-start/#step-2-creating-an-apio-project","title":"Step 2: Creating an Apio project","text":"<p>At this stage you should have a functioning <code>apio</code> command. Let's make an empty directory and populate it with the example <code>alhambra-ii/getting-started</code>.</p> <p>For more information about <code>apio examples</code>, type <code>apio examples -h</code>.</p> <pre><code># Make an empty project directory\n$ mkdir project\n$ cd project\n\n# Fetch example files\nproject$ apio examples fetch alhambra-ii/getting-started\n\n# List the project files\nproject$ tree .\n.\n\u251c\u2500\u2500 apio.ini\n\u251c\u2500\u2500 main_tb.gtkw\n\u251c\u2500\u2500 main_tb.v\n\u251c\u2500\u2500 main.v\n\u2514\u2500\u2500 pinout.pcf\n</code></pre> <p>The files in this Apio project are:</p> Name Description <code>apio.ini</code> The Apio project file. <code>main.v</code> Verilog source code. <code>pinout.pcf</code> ICE40 pin assignments. <code>main_tb.v</code> A Verilog testbench for testing <code>main.v</code>. <code>main_tb.gtkw</code> Saved GTKWAVE configuration for simulating <code>main_tb.v</code>."},{"location":"quick-start/#step-3-verifying-the-source-code","title":"Step 3: Verifying the source code","text":"<p>To verify the source code, we use two commands: <code>apio lint</code> and <code>apio build</code>. The first scans the code for various errors and nitpicks, while the second actually builds it.</p> <p>For more information about the commands, type <code>apio lint -h</code> and <code>apio build -h</code>.</p> <pre><code>project$ apio lint\n\nproject$ apio build\n</code></pre> <p>If you encounter any problems with the code, fix them and repeat.</p>"},{"location":"quick-start/#step-4-simulating-the-design","title":"Step 4: Simulating the design","text":"<p>To simulate the design, we use the command <code>apio sim</code>, which runs a simulation of the testbench and shows its results in a graphical GTKWAVE window. The <code>main_tb.gtkw</code> contains the GTKWAVE configuration, and you should save it each time you make changes in GTKWAVE that you want to keep.</p> <p>For more information about <code>apio sim</code>, type <code>apio sim -h</code>.</p> <pre><code>project$ apio sim\n</code></pre> <p></p>"},{"location":"quick-start/#step-5-running-tests","title":"Step 5: Running tests","text":"<p>The command <code>apio test</code> runs all the testbenches it finds in the project in batch mode without a graphical view like <code>apio sim</code>. The command fails if any of the testbenches has an error or exits with the <code>$fatal</code> function, typically due to a failing assertion.</p> <p>For more information about <code>apio test</code>, type <code>apio test -h</code>.</p> <pre><code>project$ apio test\n\nTestbench main_tb.v\n...\nmain_tb.v:45: $finish called at 966000 (1ps)\n</code></pre>"},{"location":"quick-start/#step-6-programming-the-fpga-board","title":"Step 6: Programming the FPGA board","text":"<p>In this step, we build the project if needed and upload it to the FPGA board. With some systems and boards, this requires driver installation using the <code>apio drivers install</code> command, while others work out of the box. To test if the board is accessible, we will try to list it with the <code>apio devices</code> command. Since Alhambra-ii uses plain USB rather than a serial port, we will try to list it using the command <code>apio devices usb</code>.</p> <pre><code>project$ apio devices usb\n\nUSB Devices\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 VID:PID   \u2502 BUS:DEV \u2502 MANUFACTURER \u2502 DESCRIPTION       \u2502 SERIAL-NUM \u2502 TYPE    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 0403:6010 \u2502   0:3   \u2502 AlhambraBits \u2502 Alhambra II v1.0A \u2502            \u2502 FT2232H \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nFound 1 USB device\n</code></pre> <p>We are in luck; the device's manufacturer and description strings are listed correctly, which means that the device is accessible to Apio and doesn't require an additional driver. We are ready to program the FPGA.</p> <pre><code>project$ apio upload\n...\nSelecting USB device:\n- FILTER [VID=0403, PID=6010, REGEX=\"^Alhambra II.*\"]\n- DEVICE [0403:6010, 0:3], [AlhambraBits] [Alhambra II v1.0A] []\n...\nErasing: [==================================================] 100.00%\nWriting: [==================================================] 100.00%\nReading: [==================================================] 100.00%\n\nDone\n</code></pre> <p>The example now runs on the FPGA board, and two LEDs should be flashing alternately.</p> <p>This concludes the Apio quick start guide. We suggest reviewing the Video tutorial or going directly to the Installing Apio page to install your copy of Apio.</p>"},{"location":"supported-boards/","title":"Supported boards","text":""},{"location":"supported-boards/#supported-fpga-boards","title":"Supported FPGA Boards","text":"<p>Generated on June 15, 2025. For the updated list run <code>apio boards</code>.</p> <p>Custom board definitions can be added in the project directory.</p>"},{"location":"supported-boards/#ice40-boards","title":"ICE40 boards","text":"BOARD-ID SIZE DESCRIPTION FPGA alchitry-cu 8k Alchitry Cu Development Board ICE40HX8K-CB132 alhambra-ii 8k Alhambra II ICE40HX4K-TQ144 arice1 5k ARiCE v1 ICE40UP5K-SG48 blackice 8k BlackIce ICE40HX4K-TQ144 blackice-ii 8k BlackIce II ICE40HX4K-TQ144 blackice-mx 8k BlackIce MX ICE40HX4K-TQ144 edu-ciaa-fpga 8k EDU-CIAA-FPGA ICE40HX4K-TQ144 fomu 5k Fomu ICE40UP5K-UWG30 fpga101 5k FPGA 101 - Workshop Badge ICE40UP5K-SG48 go-board 1k The Go Board ICE40HX1K-VQ100 ice40-hx1k-evb 1k ICE40HX1K-EVB ICE40HX1K-VQ100 ice40-hx8k 8k iCE40-HX8K Breakout Board ICE40HX8K-CT256 ice40-hx8k-evb 8k iCE40HX8K-EVB ICE40HX8K-CT256 ice40-ul1k-breakout 1k iCE40-UL1K UltraLite Breakout ICE40UL1K-CM36A ice40-up5k 5k iCE40 UltraPlus Breakout ICE40UP5K-SG48 iceblink40-hx1k 1k iCEblink40-HX1K Eval Kit ICE40HX1K-VQ100 icebreaker 5k iCEBreaker ICE40UP5K-SG48 icebreaker-bitsy0 5k iCEBreaker bitsy ICE40UP5K-SG48 icebreaker-bitsy1 5k iCEBreaker bitsy ICE40UP5K-SG48 icefun 8k iceFUN ICE40HX8K-CB132 icestick 1k iCEstick Eval Kit ICE40HX1K-TQ144 icesugar-1-5 5k iCESugar v1.5 ICE40UP5K-SG48 icesugar-nano 1k iCESugar-nano ICE40LP1K-CM36 icewerx 8k iceWerx ICE40HX8K-CB132 icezum 1k Icezum Alhambra ICE40HX1K-TQ144 kefir 8k K\u00e9fir I iCE40-HX4K ICE40HX4K-TQ144 odt-icyblue-feather 4k ODT_IcyBlue_Feather ICE5LP4K-SG48 ok-ice40pro 5k OK-iCE40Pro ICE40UP5K-SG48 pi-sicle 8k Pi-sicle ICE40HX4K-TQ144 pico-ice 5k pico-ice ICE40UP5K-SG48 thetamachines-eth4k 8k Theta Machines ETH4K ICE40HX4K-TQ144 tinyfpga-b2 8k TinyFPGA B2 ICE40LP8K-CM81 tinyfpga-bx 8k TinyFPGA BX ICE40LP8K-CM81 upduino 5k UPDuino v1.0 ICE40UP5K-SG48 upduino2 5k UPDuino v2.0 ICE40UP5K-SG48 upduino21 5k UPduino v2.1 ICE40UP5K-SG48 upduino3 5k UPduino v3.0 ICE40UP5K-SG48 upduino31 5k UPduino v3.1 ICE40UP5K-SG48"},{"location":"supported-boards/#ecp5-boards","title":"ECP5 boards","text":"BOARD-ID SIZE DESCRIPTION FPGA butterstick-r10-2g-85k 85k butterstick r1.0 LFE5UM5G-85F-8BG381C butterstick-r10-2g-85k-ft2232h 85k butterstick r1.0 LFE5UM5G-85F-8BG381C butterstick-r10-2g-85k-ft232h 85k butterstick r1.0 LFE5UM5G-85F-8BG381C colorlight-5a-75b-v61 25k ColorLight-5A-75B-V61 LFE5U-25F-6BG381C colorlight-5a-75b-v7 25k ColorLight-5A-75B-V7 LFE5U-25F-6BG256C colorlight-5a-75b-v8 25k ColorLight-5A-75B-V8 LFE5U-25F-6BG256C colorlight-5a-75e-v6 25k ColorLight-5A-75E-V6 LFE5U-25F-6BG256C colorlight-5a-75e-v71-ft2232h 25k ColorLight-5A-75E-V71 LFE5U-25F-6BG256C colorlight-5a-75e-v71-ft232h 25k ColorLight-5A-75E-V71 LFE5U-25F-6BG256C colorlight-5a-75e-v71-usb-blaster 25k ColorLight-5A-75E-V71 LFE5U-25F-6BG256C colorlight-i5-v7-0-ft2232h 25k ColorLight-i5 LFE5U-25F-6BG381C colorlight-i5-v7-0-ft232h 25k ColorLight-i5 LFE5U-25F-6BG381C colorlight-i5-v7-0-usb-blaster 25k ColorLight-i5 LFE5U-25F-6BG381C colorlight-i9-v7-2-ft2232h 45k ColorLight-i9 LFE5U-45F-6BG381C colorlight-i9-v7-2-ft232h 45k ColorLight-i9 LFE5U-45F-6BG381C colorlight-i9-v7-2-usb-blaster 45k ColorLight-i9 LFE5U-45F-6BG381C cynthion-r1-4 12k Cynthion r1.4 LFE5U-12F-6BG256C ecp5-evaluation-board 85k ECP5-Evaluation-Board LFE5UM5G-85F-8BG381C ecp5-mini-12 12k ECP5-Mini-12 LFE5U-12F-6BG256C ecp5-mini-25 25k ECP5-Mini-12 LFE5U-25F-6BG256C fleafpga-ohm-ft2232h 25k FleaFPGA-Ohm_(FT2232H) LFE5U-25F-6BG381C fleafpga-ohm-ft232h 25k FleaFPGA-Ohm_(FT232H) LFE5U-25F-6BG381C fleafpga-ohm-usb-blaster 25k FleaFPGA-Ohm_(USB-Blaster) LFE5U-25F-6BG381C icesugar-pro-ft2232h 25k ColorLight-i5 LFE5U-25F-6BG256C icesugar-pro-ft232h 25k ColorLight-i5 LFE5U-25F-6BG256C icesugar-pro-usb-blaster 25k ColorLight-i5 LFE5U-25F-6BG256C mimas-ecp5-mini 45k Mimas ECP5 Mini LFE5U-45F-6BG256C orangecrab-r02-25f 25k OrangeCrab r0.2 LFE5U-25F-6MG285C orangecrab-r02-85f 85k OrangeCrab r0.2 LFE5U-85F-6MG285C tinyfpga-ex-rev1 85k TinyFPGA EX rev 1 LFE5U-85F-6MG285C tinyfpga-ex-rev2 85k TinyFPGA EX rev 2 LFE5UM5G-85F-8MG285C ulx3s-12f 12k ULX3S LFE5U-12F-6BG381C ulx3s-25f 25k ULX3S LFE5U-25F-6BG381C ulx3s-45f 45k ULX3S LFE5U-45F-6BG381C ulx3s-85f 85k ULX3S LFE5U-85F-6BG381C versa 45k ECP5 Versa LFE5UM-45F-6BG381C"},{"location":"supported-boards/#gowin-boards","title":"GOWIN boards","text":"BOARD-ID SIZE DESCRIPTION FPGA sipeed-tang-nano 1k Sipeed Tang Nano GW1N-LV1QN48C6/I5 sipeed-tang-nano-1k 1k Sipeed Tang Nano 1k GW1NZ-LV1QN48C6/I5 sipeed-tang-nano-20k 20k Sipeed Tang Nano 20k GW2AR-LV18QN88C8/I7 sipeed-tang-nano-4k 4k Sipeed Tang Nano 4k GW1NSR-LV4CQN48PC7/I6 sipeed-tang-nano-9k 9k Sipeed Tang Nano 9k GW1NR-LV9QN88PC6/I5"},{"location":"supported-fpgas/","title":"Supported FPGAs","text":""},{"location":"supported-fpgas/#supported-fpgas","title":"Supported FPGAs","text":"<p>Generated on June 15, 2025. For the updated list run <code>apio fpgas</code>.</p> <p>Custom FPGAs definitions can be added in the project directory.</p>"},{"location":"supported-fpgas/#ice40-fpgas","title":"ICE40 FPGAs","text":"FPGA-ID SIZE PART-NUM ice40hx1k-cb132 1k ICE40HX1K-CB132 ice40hx1k-tq144 1k ICE40HX1K-TQ144 ice40hx1k-vq100 1k ICE40HX1K-VQ100 ice40hx4k-bg121 4k ICE40HX4K-BG121 ice40hx4k-bg121-8k 8k ICE40HX4K-BG121 ice40hx4k-cb132 4k ICE40HX4K-CB132 ice40hx4k-cb132-8k 8k ICE40HX4K-CB132 ice40hx4k-tq144 4k ICE40HX4K-TQ144 ice40hx4k-tq144-8k 8k ICE40HX4K-TQ144 ice40hx8k-bg121 8k ICE40HX8K-BG121 ice40hx8k-cb132 8k ICE40HX8K-CB132 ice40hx8k-cm225 8k ICE40HX8K-CM225 ice40hx8k-ct256 8k ICE40HX8K-CT256 ice40lp1k-cb121 1k ICE40LP1K-CB121 ice40lp1k-cb81 1k ICE40LP1K-CB81 ice40lp1k-cm121 1k ICE40LP1K-CM121 ice40lp1k-cm36 1k ICE40LP1K-CM36 ice40lp1k-cm49 1k ICE40LP1K-CM49 ice40lp1k-cm81 1k ICE40LP1K-CM81 ice40lp1k-qn84 1k ICE40LP1K-QN84 ice40lp1k-swg16tr 1k ICE40LP1K-SWG16TR ice40lp384-cm36 384 ICE40LP384-CM36 ice40lp384-cm49 384 ICE40LP384-CM49 ice40lp384-qn32 384 ICE40LP384-QN32 ice40lp4k-cm121 4k ICE40LP4K-CM121 ice40lp4k-cm121-8k 8k ICE40LP4K-CM121 ice40lp4k-cm225 4k ICE40LP4K-CM225 ice40lp4k-cm225-8k 8k ICE40LP4K-CM225 ice40lp4k-cm81 4k ICE40LP4K-CM81 ice40lp4k-cm81-8k 8k ICE40LP4K-CM81 ice40lp8k-cm121 8k ICE40LP8K-CM121 ice40lp8k-cm225 8k ICE40LP8K-CM225 ice40lp8k-cm81 8k ICE40LP8K-CM81 ice40ul1k-cm36a 1k ICE40UL1K-CM36A ice40up5k-sg48 5k ICE40UP5K-SG48 ice40up5k-uwg30 5k ICE40UP5K-UWG30 ice5lp4k-sg48 4k ICE5LP4K-SG48"},{"location":"supported-fpgas/#ecp5-fpgas","title":"ECP5 FPGAs","text":"FPGA-ID SIZE PART-NUM lfe5u-12f-6bg256c 12k LFE5U-12F-6BG256C lfe5u-12f-6bg381c 12k LFE5U-12F-6BG381C lfe5u-12f-6mg285c 12k LFE5U-12F-6MG285C lfe5u-25f-6bg256c 25k LFE5U-25F-6BG256C lfe5u-25f-6bg381c 25k LFE5U-25F-6BG381C lfe5u-25f-6mg285c 25k LFE5U-25F-6MG285C lfe5u-45f-6bg256c 45k LFE5U-45F-6BG256C lfe5u-45f-6bg381c 45k LFE5U-45F-6BG381C lfe5u-45f-6bg554c 45k LFE5U-45F-6BG554C lfe5u-45f-6mg285c 45k LFE5U-45F-6MG285C lfe5u-85f-6bg381c 85k LFE5U-85F-6BG381C lfe5u-85f-6bg554c 85k LFE5U-85F-6BG554C lfe5u-85f-6bg756c 85k LFE5U-85F-6BG756C lfe5u-85f-6mg285c 85k LFE5U-85F-6MG285C lfe5um-25f-6bg256c 25k LFE5UM-25F-6BG256C lfe5um-25f-6bg381c 25k LFE5UM-25F-6BG381C lfe5um-25f-6mg285c 25k LFE5UM-25F-6MG285C lfe5um-45f-6bg256c 45k LFE5UM-45F-6BG256C lfe5um-45f-6bg381c 45k LFE5UM-45F-6BG381C lfe5um-45f-6bg554c 45k LFE5UM-45F-6BG554C lfe5um-45f-6mg285c 45k LFE5UM-45F-6MG285C lfe5um-85f-6bg381c 85k LFE5UM-85F-6BG381C lfe5um-85f-6bg554c 85k LFE5UM-85F-6BG554C lfe5um-85f-6bg756c 85k LFE5UM-85F-6BG756C lfe5um-85f-6mg285c 85k LFE5UM-85F-6MG285C lfe5um5g-25f-8bg256c 25k LFE5UM5G-25F-8BG256C lfe5um5g-25f-8bg381c 25k LFE5UM5G-25F-8BG381C lfe5um5g-25f-8mg285c 25k LFE5UM5G-25F-8MG285C lfe5um5g-45f-8bg256c 45k LFE5UM5G-45F-8BG256C lfe5um5g-45f-8bg381c 45k LFE5UM5G-45F-8BG381C lfe5um5g-45f-8bg554c 45k LFE5UM5G-45F-8BG554C lfe5um5g-45f-8mg285c 45k LFE5UM5G-45F-8MG285C lfe5um5g-85f-8bg381c 85k LFE5UM5G-85F-8BG381C lfe5um5g-85f-8bg554c 85k LFE5UM5G-85F-8BG554C lfe5um5g-85f-8bg756c 85k LFE5UM5G-85F-8BG756C lfe5um5g-85f-8mg285c 85k LFE5UM5G-85F-8MG285C"},{"location":"supported-fpgas/#gowin-fpgas","title":"GOWIN FPGAs","text":"FPGA-ID SIZE PART-NUM gw1n-lv1qn48c6-i5 1k GW1N-LV1QN48C6/I5 gw1nr-lv9qn88pc6-i5 9k GW1NR-LV9QN88PC6/I5 gw1nsr-lv4cqn48pc7-i6 4k GW1NSR-LV4CQN48PC7/I6 gw1nz-lv1qn48c6-i5 1k GW1NZ-LV1QN48C6/I5 gw2ar-lv18qn88c8-i7 20k GW2AR-LV18QN88C8/I7"},{"location":"system-requirements/","title":"Apio System Requirements","text":"<p>The information on this page was last updated in June 2025.</p>"},{"location":"system-requirements/#operating-system-requirements","title":"Operating System Requirements","text":"<p>Apio is supported on the following operating systems (also known as platforms):</p> Apio Platform Code Description Versions darwin_arm64 macOS (Apple Silicon) macOS 12 and above darwin_x86_64 macOS (Intel) macOS 12 and above linux_x86_64 Linux x86 64-bit Tested with Ubuntu LTS 24.04 linux_aarch64 Linux ARM 64-bit windows_amd64 Windows x86 64-bit Windows 10 and above"},{"location":"system-requirements/#python-requirements","title":"Python Requirements","text":"<p>These requirements apply only when installing Apio as a Pip package (Python-based installation).</p> <p>Python is not required when installing Apio using an installer, Debian package, or a file bundle.</p> <p>To test the Python version, run <code>python --version</code>. To download Python, visit python.org.</p> Python Version Status 3.13.x Recommended 3.12.x Supported 3.11.x Supported"},{"location":"updating-the-docs/","title":"Updating Apio Docs","text":"<p>Apio documentation is written in Markdown and published using the <code>mkdocs</code> tool at https://fpgawars.github.io/apio. The rest of this page explains how to update and preview the documentation.</p>"},{"location":"updating-the-docs/#installing-mkdocs","title":"Installing MkDocs","text":"<p>Install MkDocs and the Material theme with:</p> <pre><code>pip install mkdocs-material\n</code></pre>"},{"location":"updating-the-docs/#navigation","title":"Navigation","text":"<p>The structure and navigation of the docs are defined in <code>mkdocs.yml</code>, including the site layout and page mappings.</p>"},{"location":"updating-the-docs/#pages","title":"Pages","text":"<p>Markdown page files (<code>*.md</code>) are stored in the <code>docs</code> directory.</p>"},{"location":"updating-the-docs/#graphics","title":"Graphics","text":"<p>Pictures, diagrams, and other graphics are stored in the <code>docs/assets</code> directory.</p>"},{"location":"updating-the-docs/#stylesheets","title":"Stylesheets","text":"<p>Apio's custom styles are defined in <code>docs/stylesheets/extra.css</code>, which is referenced from <code>mkdocs.yml</code>.</p>"},{"location":"updating-the-docs/#previewing-local-changes","title":"Previewing Local Changes","text":"<p>To start a local web server and preview changes as you edit:</p> <pre><code>invoke docs-viewer\n</code></pre> <p>This enables live reloading in your browser.</p>"},{"location":"updating-the-docs/#sending-a-pull-request","title":"Sending a Pull Request","text":"<p>Before sending a pull request to the Apio repository, check the following on your forked repository:</p> <ol> <li> <p>The following workflows in the Actions tab of your fork repo completed successfully:</p> <ul> <li>publish-mkdocs-docs</li> <li>pages-build-deployment</li> <li>monitor-apio-latest</li> <li>test</li> </ul> </li> <li> <p>The docs at <code>https://${user}.github.io/apio</code> are live and include     your changes (replace ${user} with the username of your fork repo).</p> </li> </ol>"},{"location":"updating-the-docs/#publishing","title":"Publishing","text":"<p>Documentation is automatically published when changes are pushed to <code>mkdocs.yml</code> or the <code>docs</code> directory. This triggers the GitHub Actions workflow:</p> <pre><code>.github/workflows/publish-mkdocs-docs.yaml\n</code></pre> <p>The workflow updates the site on GitHub Pages via the <code>gh-pages</code> branch. You can monitor workflow runs in the repository's Actions tab.</p>"},{"location":"using-examples/","title":"Using Apio's Examples","text":"<p>Apio comes with a set of sample projects that demonstrate its features and can be used as starting points for your own projects. To list the available examples, type:</p> <pre><code>$ apio examples list\n</code></pre> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 BOARD/EXAMPLE                  \u2502 ARCH  \u2502 DESCRIPTION                                                 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 alchitry-cu/blinky             \u2502 ice40 \u2502 Blinking all LEDs                                           \u2502\n\u2502 alhambra-ii/bcd-counter        \u2502 ice40 \u2502 Verilog example with testbenches and subdirectories.        \u2502\n\u2502 alhambra-ii/bcd-counter-sv     \u2502 ice40 \u2502 SystemVerilog example with testbenches and subdirectories.  \u2502\n\u2502 alhambra-ii/blinky             \u2502 ice40 \u2502 Blinking LED                                                \u2502\n\u2502 alhambra-ii/getting-started    \u2502 ice40 \u2502 Example for Apio Getting Started docs.                      \u2502\n\u2502 alhambra-ii/ledon              \u2502 ice40 \u2502 Turning on an LED                                           \u2502\n\u2502 sipeed-tang-nano-9k/blinky-sv  \u2502 gowin \u2502 Blinking LED (SystemVerilog)                                \u2502\n\u2502 sipeed-tang-nano-9k/pll        \u2502 gowin \u2502 PLL clock multiplier                                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>To fetch an example we create a new empty directory and fetch the example files int it.</p> <pre><code># Create an empty project directory\n$ apio mkdir work\n$ cd work\n\n# Fetch the example\n$ apio example fetch alhambra-ii/getting-started\n</code></pre> <p>Now lets look at the project file structure</p> <pre><code>$ tree .\n.\n\u251c\u2500\u2500 apio.ini\n\u251c\u2500\u2500 main_tb.gtkw\n\u251c\u2500\u2500 main_tb.v\n\u251c\u2500\u2500 main.v\n\u2514\u2500\u2500 pinout.pcf\n</code></pre> <p>And the project file <code>apio.ini</code>. <pre><code>$ cat -n apio.ini\n     1  ; Apio project file.\n     2\n     3  [env:default]\n     4\n     5  ; Board ID\n     6  board = alhambra-ii\n     7\n     8  ; Top module name (in main.v)\n     9  top-module = Main\n</code></pre></p> <p>The fetched example is now an Apio project that can be built and uploaded to a matching FPGA board.</p>"},{"location":"using-system-verilog/","title":"Using SystemVerilog","text":"<p>You can use SystemVerilog files in your Apio project just like Verilog files. Simply change the file extension from <code>.v</code> to <code>.sv</code> to indicate that they should be handled as SystemVerilog files. This applies to both synthesizable modules and testbenches.</p> <p>It's also okay to mix Verilog <code>.v</code> files and SystemVerilog <code>.sv</code> files within the same project.</p>"},{"location":"using-testbenches/","title":"Using testbenches","text":"<p>Testbenches are non-synthesizable Verilog files with the suffix <code>_tb.v</code> and SystemVerilog files with the suffix <code>_tb.sv</code> that are used to simulate and test the synthesizable modules of the project. Testbenches are used by the command <code>apio sim</code> for simulation with a graphical view of the signals, and by <code>apio test</code> for a batch test to ensure that none of the assertions in the testbenches fail.</p> <p>Testbench files can be placed anywhere in the project directory tree, either near the modules they test or in a separate directory dedicated to testing. When you run <code>apio sim</code> and view the results in GTKWave, it is recommended to save the GTKWave configuration in a <code>.gtkw</code> file named after its testbench so that it will take effect the next time you run <code>apio sim</code>.</p> <p>Apio defines the Verilog macro when running <code>apio sim</code> and does not define it when running <code>apio test</code>. This allows conditional calls to <code>$fatal</code> such that the simulation exits with an error when run in batch mode using <code>apio test</code>, but continues and emits the wave file when run using <code>apio sim</code>.</p> <p>Make sure that your testbenches do not call <code>$dumpfile()</code> and instead let Apio set the desired location for the generated signal files. Failing to do so may result in Apio being unable to find the file when opening the GTKWave signal viewer or when cleaning the project.</p>"},{"location":"using-testbenches/#example-simulation-results-of-a-testbench","title":"Example simulation results of a testbench","text":"<p>These results were generated using a testbench and the command <code>apio sim</code>.</p> <p></p>"},{"location":"using-testbenches/#instructions-for-ai","title":"Instructions for AI","text":"<p>One way to write testbenches is to provide the tested module and instructions to an AI engine and ask it to generate the testbench code. The rules below can be copy-pasted into the AI prompt to inform it of Apio's requirements.</p> <p>Apio testbench rules:</p> <ul> <li> <p>Rule 1: Use <code>$dumpvars()</code> with the testbench module name as an argument.</p> </li> <li> <p>Rule 2: Do not use <code>$dumpfile()</code>.</p> </li> <li> <p>Rule 3: Compare expected values to actual values, and if they don't match, print an error message and call <code>$fatal</code> to exit.</p> </li> <li> <p>Rule 4: Instead of <code>$fatal</code>, use <code>if (!`APIO_SIM) $fatal</code>.</p> </li> <li> <p>Rule 5: At the end of the testbench, print the message \"End of simulation\".</p> </li> <li> <p>Rule 6: Create in the testbench a boolean signal called <code>tb_error</code> with the initial value of 0 and the comment \"Set to high on first error\", and set it to 1 each time an actual value does not match the expected value.</p> </li> </ul>"},{"location":"using-testbenches/#example","title":"Example","text":"<p>We gave this module text to ChatGPT and asked it to generate a testbench based on the rules. <pre><code>module Main #(\n    parameter integer N = 3_000_000\n) (\n    input  CLK,        // 12MHz clock\n    output [7:0] ROWS, // LED rows\n    output [3:0] COLS  // LED columns\n);\n\n  reg [31:0] counter = 0;\n\n  reg toggle = 0;\n\n  // Rows and columns are active low.\n  assign ROWS = {6'b111111, toggle, ~toggle};\n  assign COLS = 4'b1110;\n\n  always @(posedge CLK) begin\n    if (counter &gt;= N - 1) begin\n      counter &lt;= 0;\n      toggle &lt;= !toggle;\n    end else begin\n      counter &lt;= counter + 1;\n    end\n  end\n\nendmodule\n</code></pre></p> <p>The provided testbench:</p> <pre><code>module Main_tb;\n\n  reg CLK = 0;\n  wire [7:0] ROWS;\n  wire [3:0] COLS;\n\n  // Clock generation: 12MHz clock -&gt; 83.33ns period\n  always #41 CLK = ~CLK;\n\n  // Instantiate the DUT (Device Under Test)\n  Main #(.N(6)) dut (\n    .CLK(CLK),\n    .ROWS(ROWS),\n    .COLS(COLS)\n  );\n\n  // Set to high on first error\n  reg tb_error = 0;\n\n  initial begin\n    $dumpvars(0, Main_tb);\n\n    integer i;\n    reg expected_toggle;\n\n    expected_toggle = 0;\n\n    // Wait for a few toggle events\n    for (i = 0; i &lt; 10; i = i + 1) begin\n      wait (ROWS[1] != ROWS[0]);\n      if (ROWS[1] !== expected_toggle || ROWS[0] !== ~expected_toggle) begin\n        $display(\"ERROR at toggle %0d: expected ROWS[1:0] = %b%b, got %b%b\",\n                 i, expected_toggle, ~expected_toggle, ROWS[1], ROWS[0]);\n        tb_error = 1;\n        if (!`APIO_SIM) $fatal;\n      end\n      expected_toggle = ~expected_toggle;\n      @(posedge CLK);\n    end\n\n    $display(\"End of simulation\");\n</code></pre>"},{"location":"video-tutorial/","title":"Apio Video Tutorial","text":"<p>Shawn Hymel created an excellent video series introducing FPGA design using Apio 0.95. To view the series on YouTube, click the video thumbnail below.</p> <p></p> <p>The Apio 0.6.5 commands used in the video series differ from the current Apio 1.x.x commands, but all their functionality has been preserved\u2014and even improved. For details, see the Apio 1.x.x command differences.</p> <p></p> <p></p>"}]}